{
  "address": "0x3c234573bF7b0Db6BAF8ffFcD4514735390CCFac",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "availableAssets",
          "type": "uint256"
        }
      ],
      "name": "DuringWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceBeforeMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceAfterMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceOfUnderlying",
          "type": "uint256"
        }
      ],
      "name": "PutInStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceBeforeRedeem",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lost",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReturnToLender",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lenderAddress",
          "type": "address"
        }
      ],
      "name": "__BaseStrategy__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lender",
      "outputs": [
        {
          "internalType": "contract ILender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assets",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfAssetsInStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directBalanceOfAssetsInStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wantTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lenderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "setLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "work",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6ad3d4739941cbac8850ba43a32e84e08212ec9f3c1c90254d19dfe8840bb11",
  "receipt": {
    "to": null,
    "from": "0x62D623A64FE544f601eA0168Fff3B5442f7101b9",
    "contractAddress": "0x3c234573bF7b0Db6BAF8ffFcD4514735390CCFac",
    "transactionIndex": 0,
    "gasUsed": "2411498",
    "logsBloom": "0x
    "blockHash": "0x0a07be55623f0b0f439a6873ce65a1c824d5ee5cdf8f4a6caf991614e5c0a983",
    "transactionHash": "0xb6ad3d4739941cbac8850ba43a32e84e08212ec9f3c1c90254d19dfe8840bb11",
    "logs": [],
    "blockNumber": 19596531,
    "cumulativeGasUsed": "2411498",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e71a9365e9fe2ec9522ba39fb8014d1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableAssets\",\"type\":\"uint256\"}],\"name\":\"DuringWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceBeforeMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceAfterMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"}],\"name\":\"PutInStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceBeforeRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lost\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnToLender\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"}],\"name\":\"__BaseStrategy__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lender\",\"outputs\":[{\"internalType\":\"contract ILender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfAssetsInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directBalanceOfAssetsInStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wantTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"setLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supplyRatePerBlock()\":{\"details\":\"Returns the current per-block supply interest rate.  Calculates the supply rate:  underlying = totalSupply \\u00d7 exchangeRate  borrowsPer = totalBorrows \\u00f7 underlying  supplyRate = borrowRate \\u00d7 (1-reserveFactor) \\u00d7 borrowsPer\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"__BaseStrategy__init(string,address,address)\":{\"notice\":\"name - name of the token wantAddress - address of ERC20 token contract which will be stored in fund vaultAddress - address of token where possible stake token\"},\"assets()\":{\"notice\":\"Contract of token which will be stored in this vault\"},\"balanceOfAssetsInStake()\":{\"notice\":\"Return current balance of assets which put in stake\"},\"directBalanceOfAssetsInStake()\":{\"notice\":\"Return current balance of assets which put in stake, as transaction, because can modify state\"},\"initialize(string,address,address,address)\":{\"notice\":\"name - name of the token wantTokenAddress - address of ERC20 token contract which will be stored in fund stakingAddress - address of token where possible stake token\"},\"lender()\":{\"notice\":\"Lender address from which this borrower want to request token.\"},\"totalAssets()\":{\"notice\":\"Estimated total assets which currently hold in strategy and in stake\"},\"want()\":{\"notice\":\"Contract of token which this strategy want to borrow and increase\"},\"withdraw(uint256)\":{\"notice\":\"Try to widthdraw given amount and return loss\"},\"work()\":{\"notice\":\"Make all work which need for invest or reinvest tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20DforceStrategy.sol\":\"ERC20DforceStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseStrategy.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./IBorrower.sol\\\";\\nimport \\\"./ILender.sol\\\";\\nimport \\\"./SimpleVault.sol\\\";\\n\\nabstract contract BaseStrategy is Initializable, IBorrower, OwnableUpgradeable, SimpleVault {\\n\\n    ILender public _lender;\\n\\n    string public name;\\n    \\n    /// name - name of the token\\n    /// wantAddress - address of ERC20 token contract which will be stored in fund\\n    /// vaultAddress - address of token where possible stake token\\n    function __BaseStrategy__init(\\n        string memory _name,\\n        address wantAddress,\\n        address lenderAddress\\n    ) initializer public {\\n        __Ownable_init();\\n        __SimpleVault_init(wantAddress);\\n        name = _name;\\n        _lender = ILender(lenderAddress);\\n    }\\n\\n    modifier onlyLender() {\\n        require(address(_lender) == msg.sender, \\\"Strategy: caller is not a vault\\\");\\n        _;\\n    }\\n\\n    /// Contract of token which this strategy want to borrow and increase\\n    function want() external view override returns (address) {\\n        return address(assets);\\n    }\\n    \\n    function lender() external view override returns (address) {\\n        return address(_lender);\\n    }\\n\\n    function setLender(address lender) external onlyOwner {\\n        _lender = ILender(lender);\\n    }\\n}\",\"keccak256\":\"0x878f58a8ff0f7058f58f38bb1331a1b938fdd149eb0bf305ad63ab25f66d71e2\",\"license\":\"MIT\"},\"contracts/ERC20DforceStrategy.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./dependencies/dforce/ERC20iToken.sol\\\";\\nimport \\\"./IBorrower.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\nimport \\\"./library/SafeRatioMath.sol\\\";\\n\\ncontract ERC20DforceStrategy is Initializable, IBorrower, BaseStrategy, ReentrancyGuardUpgradeable {\\n    /// Contract which allow stake token\\n    ERC20iToken internal stake;\\n\\n    using SafeRatioMath for uint256;\\n\\n    event Borrowed(uint256 amount);\\n    event PutInStake(uint256 amount, uint256 balanceBeforeMint, uint256 balanceAfterMint, uint256 balanceOfUnderlying);\\n    event Redeemed(uint256 amount);\\n    event ReturnToLender(uint256 amount);\\n    event Redeemed(uint256 amount, uint256 balanceBeforeRedeem, uint256 withdrawn, uint256 lost);\\n\\n    /// name - name of the token\\n    /// wantTokenAddress - address of ERC20 token contract which will be stored in fund\\n    /// stakingAddress - address of token where possible stake token\\n    function initialize(\\n        string memory _name,\\n        address wantTokenAddress,\\n        address lenderAddress,\\n        address stakingAddress\\n    ) initializer public {\\n        __BaseStrategy__init(_name, wantTokenAddress, lenderAddress);\\n\\n        stake = ERC20iToken(stakingAddress);\\n    }\\n\\n    /// Make all work which need for invest or reinvest tokens\\n    function work() external {\\n        _tryToBorrow();\\n\\n        uint256 balance = _availableAssets();\\n        if (balance == 0) {\\n            // not have anyting to put in stake\\n            return;\\n        }\\n\\n        // Try to put in stake borrowed assets\\n        _putInStake(balance);\\n    }\\n\\n    /// Try to borrow some assets from the lender\\n    function _tryToBorrow() internal {\\n        uint256 avaiable = _lender.creditAvailable();\\n        if(avaiable == 0) {\\n            return;\\n        }\\n\\n        _lender.borrow(avaiable);\\n\\n        emit Borrowed(avaiable);\\n    }\\n\\n    function _putInStake(uint256 amount) internal {\\n        _increaseAssetsAllowance(address(stake), amount);\\n\\n        uint256 balance = stake.balanceOf(address(this));\\n        stake.mint(address(this), amount);\\n\\n        emit PutInStake(amount, balance, stake.balanceOf(address(this)), stake.balanceOfUnderlying(address(this)));\\n    }\\n\\n    event DuringWithdraw(uint256 amount, uint256 availableAssets);\\n\\n    /// Try to widthdraw given amount and return loss\\n    function withdraw(uint256 amount) external override onlyLender nonReentrant returns (uint256) {\\n        require(amount <= totalAssets(), \\\"Not have enough money to withdraw\\\");\\n\\n        emit DuringWithdraw(amount, _availableAssets());\\n\\n        if (amount <= _availableAssets()) {\\n            // We have enough free money to return to lender\\n            _transferAssetsToLender(amount);\\n            return 0;\\n        }\\n\\n        // TODO: use safe math\\n        uint256 lost = _redeem(amount - _availableAssets());\\n        \\n        // transfer all assets to lender\\n        // can be case when redeemed more money then need\\n        // TODO: try to check such case\\n        _transferAssetsToLender(_availableAssets());\\n\\n        return lost;\\n    }\\n\\n    /// Redeem given amount of \\\"want\\\" token and return lost amount\\n    function _redeem(uint256 amount) internal returns (uint256) {\\n        uint256 balance = _availableAssets();\\n\\n        stake.redeemUnderlying(address(this), amount);\\n        uint256 withdrawn = _availableAssets() - balance;\\n\\n        // Calculate amount of lost assets during withdraw from stake\\n        uint256 lost = amount - withdrawn;\\n\\n        emit Redeemed(amount, balance, withdrawn, lost);\\n        return lost;\\n    }\\n\\n    /// Estimated total assets which currently hold in strategy and in stake\\n    function totalAssets() public view override returns (uint256) {\\n        (uint256 balance,,) = balanceOfAssetsInStake();\\n        return _availableAssets() + balance;\\n    }\\n\\n    /// Return current balance of assets which put in stake\\n    function balanceOfAssetsInStake() public view returns (uint256, uint256, uint256) {\\n        uint256 rate = stake.exchangeRateStored();\\n        uint256 balance = stake.balanceOf(address(this));\\n        return (rate.rmul(balance), rate, balance);\\n    }\\n\\n    /// Return current balance of assets which put in stake, as transaction, because can modify state\\n    function directBalanceOfAssetsInStake() public returns (uint256) {\\n        return stake.balanceOfUnderlying(address(this));\\n    }\\n\\n    function _transferAssetsToLender(uint256 amount) internal {\\n        _transferAssets(address(_lender), amount);\\n    }\\n\\n    /**\\n     * @dev Returns the current per-block supply interest rate.\\n     *  Calculates the supply rate:\\n     *  underlying = totalSupply \\u00d7 exchangeRate\\n     *  borrowsPer = totalBorrows \\u00f7 underlying\\n     *  supplyRate = borrowRate \\u00d7 (1-reserveFactor) \\u00d7 borrowsPer\\n     */\\n    function supplyRatePerBlock() external view returns (uint256) {\\n        return stake.supplyRatePerBlock();\\n    }\\n\\n}\",\"keccak256\":\"0xf0593cd427e6fc842bc6f245d8b139e407924dba91c34c0b7adf6d9928d2c5d3\",\"license\":\"MIT\"},\"contracts/IBorrower.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// Interface of Borrowe which need implement to allow communicate with Lender\\ninterface IBorrower {\\n    /// Token address which this borrower want to borrow\\n    function want() external view returns (address);\\n    /// Lender address from which this borrower want to request token.\\n    function lender() external view returns (address);\\n    /// Try to widthdraw given amount and return loss\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Strategy is currently managing,\\n     *  denominated in terms of `want` tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Strategy if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Strategy relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Strategy and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function totalAssets() external view returns (uint256);\\n}\",\"keccak256\":\"0xeb533fe48e916cd194e05c909e4f318d2b231453c0e9cebecc195d590b33255d\",\"license\":\"MIT\"},\"contracts/ILender.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface ILender {\\n\\n    /**\\n     * View how much the Lender allow to increase this Borrower's borrow limit.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * Allow borrow some money from the Lender.\\n     */\\n    function borrow(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x50fce648d0a76ba11445df1a38b7d6d8de4f34256d02303aa8cc4762576dc49d\",\"license\":\"MIT\"},\"contracts/SimpleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * SimpleVault for store underlaing \\\"assets\\\", \\n * where assets represented as ERC20 token. Allow borrow assets for another accounts.\\n */\\ncontract SimpleVault is Initializable {\\n    \\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// Contract of token which will be stored in this vault\\n    IERC20Upgradeable public assets;\\n    \\n    /**\\n     * @dev Sets the values for {assets}.\\n     *\\n     * Init ERC20 based contract with given address\\n     */\\n    function __SimpleVault_init(address storageTokenAddress) initializer internal {\\n        assets = IERC20Upgradeable(storageTokenAddress);\\n    }\\n\\n    /// Transfer assets from given address to this contract\\n    function _receiveAssetsFrom(address from, uint256 value) internal {\\n        _transferAssetsFrom(from, address(this), value);\\n    }\\n\\n    /// Safely transfer assets token from given address to sender\\n    function _transferAssetsFrom(address from, address to, uint256 value) internal {\\n        assets.safeTransferFrom(from, to, value);\\n    }\\n\\n    /// Safely transfer assets token to sender\\n    function _transferAssets(address to, uint256 value) internal {\\n        assets.safeTransfer(to, value);\\n    }\\n\\n    function _increaseAssetsAllowance(address spender, uint256 value) internal {\\n        assets.safeIncreaseAllowance(spender, value);\\n    }\\n\\n    function _decreaseAssetsAllowance(address spender, uint256 value) internal {\\n        assets.safeDecreaseAllowance(spender, value);\\n    }\\n\\n\\n    /// Assets which are directly available for fund\\n    function _availableAssets() internal view returns (uint256) {\\n        return assets.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdf3197130bf3a064f2d777d2fd173be6b068024b780e204c8a890b89328bbefc\",\"license\":\"MIT\"},\"contracts/dependencies/dforce/ERC20iToken.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n// Implementation at https://etherscan.io/address/0x1a5de76ef2261fc6cb281f8a447bef4e48ef5d25#code\\n/// Interface of DForce IToken wrapper for ERC20 tokens, like USDT\\ninterface ERC20iToken is IERC20Upgradeable {\\n    /**\\n     * @dev Caller deposits assets into the market and `_recipient` receives iToken in exchange.\\n     * @param _recipient The account that would receive the iToken.\\n     * @param _mintAmount The amount of the underlying token to deposit.\\n     */\\n    function mint(address _recipient, uint256 _mintAmount) external;\\n    /**\\n     * @dev Get cash balance of this iToken in the underlying token.\\n     */\\n    function getCash() external view returns (uint256);\\n    /**\\n     * @dev Gets the underlying balance of the `_account`.\\n     * @param _account The address of the account to query.\\n     */\\n    function balanceOfUnderlying(address _account) external returns (uint256);\\n    \\n    /**\\n     * @dev Caller redeems specified iToken from `_from` to get underlying token.\\n     * @param _from The account that would burn the iToken.\\n     * @param _redeemiToken The number of iToken to redeem.\\n     */\\n    function redeem(address _from, uint256 _redeemiToken) external;\\n\\n    /**\\n     * @dev Caller redeems specified underlying from `_from` to get underlying token.\\n     * @param _from The account that would burn the iToken.\\n     * @param _redeemUnderlying The number of underlying to redeem.\\n     */\\n    function redeemUnderlying(address _from, uint256 _redeemUnderlying) external;\\n    \\n    /**\\n     * @dev Gets the newest exchange rate by accruing interest.\\n     */\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    /**\\n     * @dev Calculates the exchange rate without accruing interest.\\n     */\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the current per-block borrow interest rate.\\n     */\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the current per-block supply interest rate.\\n     *  Calculates the supply rate:\\n     *  underlying = totalSupply \\u00d7 exchangeRate\\n     *  borrowsPer = totalBorrows \\u00f7 underlying\\n     *  supplyRate = borrowRate \\u00d7 (1-reserveFactor) \\u00d7 borrowsPer\\n     */\\n    function supplyRatePerBlock() external view returns (uint256);\\n}\",\"keccak256\":\"0xdf3160c7e14bcfeef28beeedf411693ff501c1e430e318b7e6112d6b9d542a46\",\"license\":\"MIT\"},\"contracts/library/SafeRatioMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary SafeRatioMath {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 private constant BASE = 10**18;\\n    uint256 private constant DOUBLE = 10**36;\\n\\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.add(y.sub(1)).div(y);\\n    }\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(y).div(BASE);\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(BASE).div(y);\\n    }\\n\\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x.mul(BASE).add(y.sub(1)).div(y);\\n    }\\n\\n    function tmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256 result) {\\n        result = x.mul(y).mul(z).div(DOUBLE);\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 base\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n                case 0 {\\n                    switch n\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := 0\\n                        }\\n                }\\n                default {\\n                    switch mod(n, 2)\\n                        case 0 {\\n                            z := base\\n                        }\\n                        default {\\n                            z := x\\n                        }\\n                    let half := div(base, 2) // for rounding.\\n\\n                    for {\\n                        n := div(n, 2)\\n                    } n {\\n                        n := div(n, 2)\\n                    } {\\n                        let xx := mul(x, x)\\n                        if iszero(eq(div(xx, x), x)) {\\n                            revert(0, 0)\\n                        }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) {\\n                            revert(0, 0)\\n                        }\\n                        x := div(xxRound, base)\\n                        if mod(n, 2) {\\n                            let zx := mul(z, x)\\n                            if and(\\n                                iszero(iszero(x)),\\n                                iszero(eq(div(zx, x), z))\\n                            ) {\\n                                revert(0, 0)\\n                            }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) {\\n                                revert(0, 0)\\n                            }\\n                            z := div(zxRound, base)\\n                        }\\n                    }\\n                }\\n        }\\n    }\\n}\",\"keccak256\":\"0x0a835b6e688defc120592a30762e558e73872634a3e91805b0a77ecf2d5c4ed5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ad2806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063819ed863116100a2578063bcead63e11610071578063bcead63e14610260578063d2e0fe601461027e578063f2fde38b1461029e578063f34822b4146102ba578063fbebb830146102d65761010b565b8063819ed863146101e85780638da5cb5b1461020657806399189dc914610224578063ae9d70b0146102425761010b565b8063322e9f04116100de578063322e9f041461019a57806346e368d4146101a4578063715018a6146101c057806371a97305146101ca5761010b565b806301e1d1141461011057806306fdde031461012e5780631f1fcd511461014c5780632e1a7d4d1461016a575b600080fd5b6101186102f2565b604051610125919061235b565b60405180910390f35b61013661031a565b60405161014391906121f9565b60405180910390f35b6101546103a8565b604051610161919061213b565b60405180910390f35b610184600480360381019061017f9190611ebf565b6103d2565b604051610191919061235b565b60405180910390f35b6101a261059d565b005b6101be60048036038101906101b99190611d8b565b6105cd565b005b6101c861068d565b005b6101d2610715565b6040516101df91906121a8565b60405180910390f35b6101f061073b565b6040516101fd91906121c3565b60405180910390f35b61020e610761565b60405161021b919061213b565b60405180910390f35b61022c61078b565b604051610239919061235b565b60405180910390f35b61024a61083f565b604051610257919061235b565b60405180910390f35b6102686108e6565b604051610275919061213b565b60405180910390f35b610286610910565b6040516102959392919061239f565b60405180910390f35b6102b860048036038101906102b39190611d8b565b610a89565b005b6102d460048036038101906102cf9190611e44565b610b81565b005b6102f060048036038101906102eb9190611ddd565b610c5d565b005b6000806102fd610910565b505090508061030a610d55565b61031491906124a3565b91505090565b60678054610327906126a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610353906126a9565b80156103a05780601f10610375576101008083540402835291602001916103a0565b820191906000526020600020905b81548152906001019060200180831161038357829003601f168201915b505050505081565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b906122bb565b60405180910390fd5b600260685414156104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a19061233b565b60405180910390fd5b60026068819055506104ba6102f2565b8211156104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f39061229b565b60405180910390fd5b7fd982696658cace6e0854cebe8f1ddca77da4c1c46566284fcc6b0a5d5cd6553c82610526610d55565b604051610534929190612376565b60405180910390a1610544610d55565b821161055c5761055382610e07565b60009050610590565b6000610579610569610d55565b846105749190612584565b610e36565b905061058b610586610d55565b610e07565b809150505b6001606881905550919050565b6105a5610f41565b60006105af610d55565b905060008114156105c057506105cb565b6105c9816110bc565b505b565b6105d56113bd565b73ffffffffffffffffffffffffffffffffffffffff166105f3610761565b73ffffffffffffffffffffffffffffffffffffffff1614610649576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106409061227b565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106956113bd565b73ffffffffffffffffffffffffffffffffffffffff166106b3610761565b73ffffffffffffffffffffffffffffffffffffffff1614610709576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107009061227b565b60405180910390fd5b61071360006113c5565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b81526004016107e8919061213b565b602060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611ee8565b905090565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e19190611ee8565b905090565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190611ee8565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a15919061213b565b60206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611ee8565b9050610a7a818361148b90919063ffffffff16565b82829450945094505050909192565b610a916113bd565b73ffffffffffffffffffffffffffffffffffffffff16610aaf610761565b73ffffffffffffffffffffffffffffffffffffffff1614610b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afc9061227b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c9061221b565b60405180910390fd5b610b7e816113c5565b50565b6000610b8d60016114c2565b90508015610bb1576001600060016101000a81548160ff0219169083151502179055505b610bbc858585610c5d565b81609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610c565760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c4d91906121de565b60405180910390a15b5050505050565b6000610c6960016114c2565b90508015610c8d576001600060016101000a81548160ff0219169083151502179055505b610c956115b2565b610c9e8361160b565b8360679080519060200190610cb4929190611c2c565b5081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610d4f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d4691906121de565b60405180910390a15b50505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610db2919061213b565b60206040518083038186803b158015610dca57600080fd5b505afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190611ee8565b905090565b610e33606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826116d9565b50565b600080610e41610d55565b9050609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639629417830856040518363ffffffff1660e01b8152600401610ea092919061217f565b600060405180830381600087803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b50505050600081610edd610d55565b610ee79190612584565b905060008185610ef79190612584565b90507f40b4917d239fd114b0fc50f974ae5716ca27912c5b6608e2132ccf49b22561b185848484604051610f2e94939291906123d6565b60405180910390a1809350505050919050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663112c1f9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611ee8565b90506000811415610ff457506110ba565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b815260040161104f919061235b565b600060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050507f69c0ed5a77051ba5f0c42418bb6db6d3f73884dea69811c50bf320298df6ca5c816040516110b0919061235b565b60405180910390a1505b565b6110e8609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261172a565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611145919061213b565b60206040518083038186803b15801561115d57600080fd5b505afa158015611171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111959190611ee8565b9050609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff1660e01b81526004016111f492919061217f565b600060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050507ffa34ebae1defb74447b51cc3cebc758dc2a4053f484434dfb8a455203e7a13b88282609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a4919061213b565b60206040518083038186803b1580156112bc57600080fd5b505afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190611ee8565b609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b815260040161134f919061213b565b602060405180830381600087803b15801561136957600080fd5b505af115801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190611ee8565b6040516113b194939291906123d6565b60405180910390a15050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114ba670de0b6b3a76400006114ac848661177b90919063ffffffff16565b61179190919063ffffffff16565b905092915050565b60008060019054906101000a900460ff16156115395760018260ff161480156114f157506114ef306117a7565b155b611530576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115279061225b565b60405180910390fd5b600090506115ad565b8160ff1660008054906101000a900460ff1660ff161061158e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115859061225b565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f8906122fb565b60405180910390fd5b6116096117ca565b565b600061161760016114c2565b9050801561163b576001600060016101000a81548160ff0219169083151502179055505b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156116d55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516116cc91906121de565b60405180910390a15b5050565b6117268282606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182b9092919063ffffffff16565b5050565b6117778282606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118b19092919063ffffffff16565b5050565b60008183611789919061252a565b905092915050565b6000818361179f91906124f9565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611819576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611810906122fb565b60405180910390fd5b6118296118246113bd565b6113c5565b565b6118ac8363a9059cbb60e01b848460405160240161184a92919061217f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d2565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016118ef929190612156565b60206040518083038186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193f9190611ee8565b61194991906124a3565b90506119cc8463095ea7b360e01b858460405160240161196a92919061217f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d2565b50505050565b6000611a34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a999092919063ffffffff16565b9050600081511115611a945780806020019051810190611a549190611db4565b611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a9061231b565b60405180910390fd5b5b505050565b6060611aa88484600085611ab1565b90509392505050565b606082471015611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed9061223b565b60405180910390fd5b611aff856117a7565b611b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b35906122db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b679190612124565b60006040518083038185875af1925050503d8060008114611ba4576040519150601f19603f3d011682016040523d82523d6000602084013e611ba9565b606091505b5091509150611bb9828286611bc5565b92505050949350505050565b60608315611bd557829050611c25565b600083511115611be85782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c91906121f9565b60405180910390fd5b9392505050565b828054611c38906126a9565b90600052602060002090601f016020900481019282611c5a5760008555611ca1565b82601f10611c7357805160ff1916838001178555611ca1565b82800160010185558215611ca1579182015b82811115611ca0578251825591602001919060010190611c85565b5b509050611cae9190611cb2565b5090565b5b80821115611ccb576000816000905550600101611cb3565b5090565b6000611ce2611cdd84612440565b61241b565b905082815260208101848484011115611cfa57600080fd5b611d05848285612667565b509392505050565b600081359050611d1c81612a57565b92915050565b600081519050611d3181612a6e565b92915050565b600082601f830112611d4857600080fd5b8135611d58848260208601611ccf565b91505092915050565b600081359050611d7081612a85565b92915050565b600081519050611d8581612a85565b92915050565b600060208284031215611d9d57600080fd5b6000611dab84828501611d0d565b91505092915050565b600060208284031215611dc657600080fd5b6000611dd484828501611d22565b91505092915050565b600080600060608486031215611df257600080fd5b600084013567ffffffffffffffff811115611e0c57600080fd5b611e1886828701611d37565b9350506020611e2986828701611d0d565b9250506040611e3a86828701611d0d565b9150509250925092565b60008060008060808587031215611e5a57600080fd5b600085013567ffffffffffffffff811115611e7457600080fd5b611e8087828801611d37565b9450506020611e9187828801611d0d565b9350506040611ea287828801611d0d565b9250506060611eb387828801611d0d565b91505092959194509250565b600060208284031215611ed157600080fd5b6000611edf84828501611d61565b91505092915050565b600060208284031215611efa57600080fd5b6000611f0884828501611d76565b91505092915050565b611f1a816125b8565b82525050565b6000611f2b82612471565b611f358185612487565b9350611f45818560208601612676565b80840191505092915050565b611f5a8161260d565b82525050565b611f6981612631565b82525050565b611f7881612655565b82525050565b6000611f898261247c565b611f938185612492565b9350611fa3818560208601612676565b611fac816127c8565b840191505092915050565b6000611fc4602683612492565b9150611fcf826127d9565b604082019050919050565b6000611fe7602683612492565b9150611ff282612828565b604082019050919050565b600061200a602e83612492565b915061201582612877565b604082019050919050565b600061202d602083612492565b9150612038826128c6565b602082019050919050565b6000612050602183612492565b915061205b826128ef565b604082019050919050565b6000612073601f83612492565b915061207e8261293e565b602082019050919050565b6000612096601d83612492565b91506120a182612967565b602082019050919050565b60006120b9602b83612492565b91506120c482612990565b604082019050919050565b60006120dc602a83612492565b91506120e7826129df565b604082019050919050565b60006120ff601f83612492565b915061210a82612a2e565b602082019050919050565b61211e816125f6565b82525050565b60006121308284611f20565b915081905092915050565b60006020820190506121506000830184611f11565b92915050565b600060408201905061216b6000830185611f11565b6121786020830184611f11565b9392505050565b60006040820190506121946000830185611f11565b6121a16020830184612115565b9392505050565b60006020820190506121bd6000830184611f51565b92915050565b60006020820190506121d86000830184611f60565b92915050565b60006020820190506121f36000830184611f6f565b92915050565b600060208201905081810360008301526122138184611f7e565b905092915050565b6000602082019050818103600083015261223481611fb7565b9050919050565b6000602082019050818103600083015261225481611fda565b9050919050565b6000602082019050818103600083015261227481611ffd565b9050919050565b6000602082019050818103600083015261229481612020565b9050919050565b600060208201905081810360008301526122b481612043565b9050919050565b600060208201905081810360008301526122d481612066565b9050919050565b600060208201905081810360008301526122f481612089565b9050919050565b60006020820190508181036000830152612314816120ac565b9050919050565b60006020820190508181036000830152612334816120cf565b9050919050565b60006020820190508181036000830152612354816120f2565b9050919050565b60006020820190506123706000830184612115565b92915050565b600060408201905061238b6000830185612115565b6123986020830184612115565b9392505050565b60006060820190506123b46000830186612115565b6123c16020830185612115565b6123ce6040830184612115565b949350505050565b60006080820190506123eb6000830187612115565b6123f86020830186612115565b6124056040830185612115565b6124126060830184612115565b95945050505050565b6000612425612436565b905061243182826126db565b919050565b6000604051905090565b600067ffffffffffffffff82111561245b5761245a612799565b5b612464826127c8565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006124ae826125f6565b91506124b9836125f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124ee576124ed61270c565b5b828201905092915050565b6000612504826125f6565b915061250f836125f6565b92508261251f5761251e61273b565b5b828204905092915050565b6000612535826125f6565b9150612540836125f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125795761257861270c565b5b828202905092915050565b600061258f826125f6565b915061259a836125f6565b9250828210156125ad576125ac61270c565b5b828203905092915050565b60006125c3826125d6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006126188261261f565b9050919050565b600061262a826125d6565b9050919050565b600061263c82612643565b9050919050565b600061264e826125d6565b9050919050565b600061266082612600565b9050919050565b82818337600083830152505050565b60005b83811015612694578082015181840152602081019050612679565b838111156126a3576000848401525b50505050565b600060028204905060018216806126c157607f821691505b602082108114156126d5576126d461276a565b5b50919050565b6126e4826127c8565b810181811067ffffffffffffffff8211171561270357612702612799565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f74206861766520656e6f756768206d6f6e657920746f207769746864726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f53747261746567793a2063616c6c6572206973206e6f742061207661756c7400600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612a60816125b8565b8114612a6b57600080fd5b50565b612a77816125ca565b8114612a8257600080fd5b50565b612a8e816125f6565b8114612a9957600080fd5b5056fea264697066735822122061cbd6dd97de7d3afbc44b6c01c688bd87d623db321f28b53375afa371be76c664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063819ed863116100a2578063bcead63e11610071578063bcead63e14610260578063d2e0fe601461027e578063f2fde38b1461029e578063f34822b4146102ba578063fbebb830146102d65761010b565b8063819ed863146101e85780638da5cb5b1461020657806399189dc914610224578063ae9d70b0146102425761010b565b8063322e9f04116100de578063322e9f041461019a57806346e368d4146101a4578063715018a6146101c057806371a97305146101ca5761010b565b806301e1d1141461011057806306fdde031461012e5780631f1fcd511461014c5780632e1a7d4d1461016a575b600080fd5b6101186102f2565b604051610125919061235b565b60405180910390f35b61013661031a565b60405161014391906121f9565b60405180910390f35b6101546103a8565b604051610161919061213b565b60405180910390f35b610184600480360381019061017f9190611ebf565b6103d2565b604051610191919061235b565b60405180910390f35b6101a261059d565b005b6101be60048036038101906101b99190611d8b565b6105cd565b005b6101c861068d565b005b6101d2610715565b6040516101df91906121a8565b60405180910390f35b6101f061073b565b6040516101fd91906121c3565b60405180910390f35b61020e610761565b60405161021b919061213b565b60405180910390f35b61022c61078b565b604051610239919061235b565b60405180910390f35b61024a61083f565b604051610257919061235b565b60405180910390f35b6102686108e6565b604051610275919061213b565b60405180910390f35b610286610910565b6040516102959392919061239f565b60405180910390f35b6102b860048036038101906102b39190611d8b565b610a89565b005b6102d460048036038101906102cf9190611e44565b610b81565b005b6102f060048036038101906102eb9190611ddd565b610c5d565b005b6000806102fd610910565b505090508061030a610d55565b61031491906124a3565b91505090565b60678054610327906126a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610353906126a9565b80156103a05780601f10610375576101008083540402835291602001916103a0565b820191906000526020600020905b81548152906001019060200180831161038357829003601f168201915b505050505081565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003373ffffffffffffffffffffffffffffffffffffffff16606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045b906122bb565b60405180910390fd5b600260685414156104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a19061233b565b60405180910390fd5b60026068819055506104ba6102f2565b8211156104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f39061229b565b60405180910390fd5b7fd982696658cace6e0854cebe8f1ddca77da4c1c46566284fcc6b0a5d5cd6553c82610526610d55565b604051610534929190612376565b60405180910390a1610544610d55565b821161055c5761055382610e07565b60009050610590565b6000610579610569610d55565b846105749190612584565b610e36565b905061058b610586610d55565b610e07565b809150505b6001606881905550919050565b6105a5610f41565b60006105af610d55565b905060008114156105c057506105cb565b6105c9816110bc565b505b565b6105d56113bd565b73ffffffffffffffffffffffffffffffffffffffff166105f3610761565b73ffffffffffffffffffffffffffffffffffffffff1614610649576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106409061227b565b60405180910390fd5b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106956113bd565b73ffffffffffffffffffffffffffffffffffffffff166106b3610761565b73ffffffffffffffffffffffffffffffffffffffff1614610709576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107009061227b565b60405180910390fd5b61071360006113c5565b565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b81526004016107e8919061213b565b602060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611ee8565b905090565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a957600080fd5b505afa1580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e19190611ee8565b905090565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600080609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190611ee8565b90506000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a15919061213b565b60206040518083038186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611ee8565b9050610a7a818361148b90919063ffffffff16565b82829450945094505050909192565b610a916113bd565b73ffffffffffffffffffffffffffffffffffffffff16610aaf610761565b73ffffffffffffffffffffffffffffffffffffffff1614610b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afc9061227b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c9061221b565b60405180910390fd5b610b7e816113c5565b50565b6000610b8d60016114c2565b90508015610bb1576001600060016101000a81548160ff0219169083151502179055505b610bbc858585610c5d565b81609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610c565760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c4d91906121de565b60405180910390a15b5050505050565b6000610c6960016114c2565b90508015610c8d576001600060016101000a81548160ff0219169083151502179055505b610c956115b2565b610c9e8361160b565b8360679080519060200190610cb4929190611c2c565b5081606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610d4f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d4691906121de565b60405180910390a15b50505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610db2919061213b565b60206040518083038186803b158015610dca57600080fd5b505afa158015610dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e029190611ee8565b905090565b610e33606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826116d9565b50565b600080610e41610d55565b9050609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639629417830856040518363ffffffff1660e01b8152600401610ea092919061217f565b600060405180830381600087803b158015610eba57600080fd5b505af1158015610ece573d6000803e3d6000fd5b50505050600081610edd610d55565b610ee79190612584565b905060008185610ef79190612584565b90507f40b4917d239fd114b0fc50f974ae5716ca27912c5b6608e2132ccf49b22561b185848484604051610f2e94939291906123d6565b60405180910390a1809350505050919050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663112c1f9b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611ee8565b90506000811415610ff457506110ba565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b815260040161104f919061235b565b600060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050507f69c0ed5a77051ba5f0c42418bb6db6d3f73884dea69811c50bf320298df6ca5c816040516110b0919061235b565b60405180910390a1505b565b6110e8609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261172a565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611145919061213b565b60206040518083038186803b15801561115d57600080fd5b505afa158015611171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111959190611ee8565b9050609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff1660e01b81526004016111f492919061217f565b600060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050507ffa34ebae1defb74447b51cc3cebc758dc2a4053f484434dfb8a455203e7a13b88282609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a4919061213b565b60206040518083038186803b1580156112bc57600080fd5b505afa1580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190611ee8565b609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af9e669306040518263ffffffff1660e01b815260040161134f919061213b565b602060405180830381600087803b15801561136957600080fd5b505af115801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190611ee8565b6040516113b194939291906123d6565b60405180910390a15050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006114ba670de0b6b3a76400006114ac848661177b90919063ffffffff16565b61179190919063ffffffff16565b905092915050565b60008060019054906101000a900460ff16156115395760018260ff161480156114f157506114ef306117a7565b155b611530576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115279061225b565b60405180910390fd5b600090506115ad565b8160ff1660008054906101000a900460ff1660ff161061158e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115859061225b565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f8906122fb565b60405180910390fd5b6116096117ca565b565b600061161760016114c2565b9050801561163b576001600060016101000a81548160ff0219169083151502179055505b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156116d55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516116cc91906121de565b60405180910390a15b5050565b6117268282606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661182b9092919063ffffffff16565b5050565b6117778282606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118b19092919063ffffffff16565b5050565b60008183611789919061252a565b905092915050565b6000818361179f91906124f9565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611819576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611810906122fb565b60405180910390fd5b6118296118246113bd565b6113c5565b565b6118ac8363a9059cbb60e01b848460405160240161184a92919061217f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d2565b505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b81526004016118ef929190612156565b60206040518083038186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193f9190611ee8565b61194991906124a3565b90506119cc8463095ea7b360e01b858460405160240161196a92919061217f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119d2565b50505050565b6000611a34826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a999092919063ffffffff16565b9050600081511115611a945780806020019051810190611a549190611db4565b611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a9061231b565b60405180910390fd5b5b505050565b6060611aa88484600085611ab1565b90509392505050565b606082471015611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed9061223b565b60405180910390fd5b611aff856117a7565b611b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b35906122db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b679190612124565b60006040518083038185875af1925050503d8060008114611ba4576040519150601f19603f3d011682016040523d82523d6000602084013e611ba9565b606091505b5091509150611bb9828286611bc5565b92505050949350505050565b60608315611bd557829050611c25565b600083511115611be85782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1c91906121f9565b60405180910390fd5b9392505050565b828054611c38906126a9565b90600052602060002090601f016020900481019282611c5a5760008555611ca1565b82601f10611c7357805160ff1916838001178555611ca1565b82800160010185558215611ca1579182015b82811115611ca0578251825591602001919060010190611c85565b5b509050611cae9190611cb2565b5090565b5b80821115611ccb576000816000905550600101611cb3565b5090565b6000611ce2611cdd84612440565b61241b565b905082815260208101848484011115611cfa57600080fd5b611d05848285612667565b509392505050565b600081359050611d1c81612a57565b92915050565b600081519050611d3181612a6e565b92915050565b600082601f830112611d4857600080fd5b8135611d58848260208601611ccf565b91505092915050565b600081359050611d7081612a85565b92915050565b600081519050611d8581612a85565b92915050565b600060208284031215611d9d57600080fd5b6000611dab84828501611d0d565b91505092915050565b600060208284031215611dc657600080fd5b6000611dd484828501611d22565b91505092915050565b600080600060608486031215611df257600080fd5b600084013567ffffffffffffffff811115611e0c57600080fd5b611e1886828701611d37565b9350506020611e2986828701611d0d565b9250506040611e3a86828701611d0d565b9150509250925092565b60008060008060808587031215611e5a57600080fd5b600085013567ffffffffffffffff811115611e7457600080fd5b611e8087828801611d37565b9450506020611e9187828801611d0d565b9350506040611ea287828801611d0d565b9250506060611eb387828801611d0d565b91505092959194509250565b600060208284031215611ed157600080fd5b6000611edf84828501611d61565b91505092915050565b600060208284031215611efa57600080fd5b6000611f0884828501611d76565b91505092915050565b611f1a816125b8565b82525050565b6000611f2b82612471565b611f358185612487565b9350611f45818560208601612676565b80840191505092915050565b611f5a8161260d565b82525050565b611f6981612631565b82525050565b611f7881612655565b82525050565b6000611f898261247c565b611f938185612492565b9350611fa3818560208601612676565b611fac816127c8565b840191505092915050565b6000611fc4602683612492565b9150611fcf826127d9565b604082019050919050565b6000611fe7602683612492565b9150611ff282612828565b604082019050919050565b600061200a602e83612492565b915061201582612877565b604082019050919050565b600061202d602083612492565b9150612038826128c6565b602082019050919050565b6000612050602183612492565b915061205b826128ef565b604082019050919050565b6000612073601f83612492565b915061207e8261293e565b602082019050919050565b6000612096601d83612492565b91506120a182612967565b602082019050919050565b60006120b9602b83612492565b91506120c482612990565b604082019050919050565b60006120dc602a83612492565b91506120e7826129df565b604082019050919050565b60006120ff601f83612492565b915061210a82612a2e565b602082019050919050565b61211e816125f6565b82525050565b60006121308284611f20565b915081905092915050565b60006020820190506121506000830184611f11565b92915050565b600060408201905061216b6000830185611f11565b6121786020830184611f11565b9392505050565b60006040820190506121946000830185611f11565b6121a16020830184612115565b9392505050565b60006020820190506121bd6000830184611f51565b92915050565b60006020820190506121d86000830184611f60565b92915050565b60006020820190506121f36000830184611f6f565b92915050565b600060208201905081810360008301526122138184611f7e565b905092915050565b6000602082019050818103600083015261223481611fb7565b9050919050565b6000602082019050818103600083015261225481611fda565b9050919050565b6000602082019050818103600083015261227481611ffd565b9050919050565b6000602082019050818103600083015261229481612020565b9050919050565b600060208201905081810360008301526122b481612043565b9050919050565b600060208201905081810360008301526122d481612066565b9050919050565b600060208201905081810360008301526122f481612089565b9050919050565b60006020820190508181036000830152612314816120ac565b9050919050565b60006020820190508181036000830152612334816120cf565b9050919050565b60006020820190508181036000830152612354816120f2565b9050919050565b60006020820190506123706000830184612115565b92915050565b600060408201905061238b6000830185612115565b6123986020830184612115565b9392505050565b60006060820190506123b46000830186612115565b6123c16020830185612115565b6123ce6040830184612115565b949350505050565b60006080820190506123eb6000830187612115565b6123f86020830186612115565b6124056040830185612115565b6124126060830184612115565b95945050505050565b6000612425612436565b905061243182826126db565b919050565b6000604051905090565b600067ffffffffffffffff82111561245b5761245a612799565b5b612464826127c8565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006124ae826125f6565b91506124b9836125f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124ee576124ed61270c565b5b828201905092915050565b6000612504826125f6565b915061250f836125f6565b92508261251f5761251e61273b565b5b828204905092915050565b6000612535826125f6565b9150612540836125f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125795761257861270c565b5b828202905092915050565b600061258f826125f6565b915061259a836125f6565b9250828210156125ad576125ac61270c565b5b828203905092915050565b60006125c3826125d6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006126188261261f565b9050919050565b600061262a826125d6565b9050919050565b600061263c82612643565b9050919050565b600061264e826125d6565b9050919050565b600061266082612600565b9050919050565b82818337600083830152505050565b60005b83811015612694578082015181840152602081019050612679565b838111156126a3576000848401525b50505050565b600060028204905060018216806126c157607f821691505b602082108114156126d5576126d461276a565b5b50919050565b6126e4826127c8565b810181811067ffffffffffffffff8211171561270357612702612799565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4e6f74206861766520656e6f756768206d6f6e657920746f207769746864726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f53747261746567793a2063616c6c6572206973206e6f742061207661756c7400600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612a60816125b8565b8114612a6b57600080fd5b50565b612a77816125ca565b8114612a8257600080fd5b50565b612a8e816125f6565b8114612a9957600080fd5b5056fea264697066735822122061cbd6dd97de7d3afbc44b6c01c688bd87d623db321f28b53375afa371be76c664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supplyRatePerBlock()": {
        "details": "Returns the current per-block supply interest rate.  Calculates the supply rate:  underlying = totalSupply × exchangeRate  borrowsPer = totalBorrows ÷ underlying  supplyRate = borrowRate × (1-reserveFactor) × borrowsPer"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "__BaseStrategy__init(string,address,address)": {
        "notice": "name - name of the token wantAddress - address of ERC20 token contract which will be stored in fund vaultAddress - address of token where possible stake token"
      },
      "assets()": {
        "notice": "Contract of token which will be stored in this vault"
      },
      "balanceOfAssetsInStake()": {
        "notice": "Return current balance of assets which put in stake"
      },
      "directBalanceOfAssetsInStake()": {
        "notice": "Return current balance of assets which put in stake, as transaction, because can modify state"
      },
      "initialize(string,address,address,address)": {
        "notice": "name - name of the token wantTokenAddress - address of ERC20 token contract which will be stored in fund stakingAddress - address of token where possible stake token"
      },
      "lender()": {
        "notice": "Lender address from which this borrower want to request token."
      },
      "totalAssets()": {
        "notice": "Estimated total assets which currently hold in strategy and in stake"
      },
      "want()": {
        "notice": "Contract of token which this strategy want to borrow and increase"
      },
      "withdraw(uint256)": {
        "notice": "Try to widthdraw given amount and return loss"
      },
      "work()": {
        "notice": "Make all work which need for invest or reinvest tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 910,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2489,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "assets",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)402"
      },
      {
        "astId": 1954,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "_lender",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ILender)2473"
      },
      {
        "astId": 1956,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "name",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 279,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2061,
        "contract": "contracts/ERC20DforceStrategy.sol:ERC20DforceStrategy",
        "label": "stake",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ERC20iToken)2672"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20iToken)2672": {
        "encoding": "inplace",
        "label": "contract ERC20iToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)402": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(ILender)2473": {
        "encoding": "inplace",
        "label": "contract ILender",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}