{
  "address": "0xaB7B4c595d3cE8C85e16DA86630f2fc223B05057",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyTotalAssets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previusBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        }
      ],
      "name": "ReturnFromStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "storageTokenAddress",
          "type": "address"
        }
      ],
      "name": "__EquityFund_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assets",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "storageTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategyAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategyAddress",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "contract IBorrower",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c02f891ab44201340274d5c378a2311985344bbae46ff37a67588017e22534e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xaB7B4c595d3cE8C85e16DA86630f2fc223B05057",
    "transactionIndex": 0,
    "gasUsed": "4044129",
    "logsBloom": "0x
    "blockHash": "0x163ea59837f814240bb07364a9e931b129325548b15adaf23aae7a97e48f6639",
    "transactionHash": "0x4c02f891ab44201340274d5c378a2311985344bbae46ff37a67588017e22534e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14668854,
        "transactionHash": "0x4c02f891ab44201340274d5c378a2311985344bbae46ff37a67588017e22534e",
        "address": "0xaB7B4c595d3cE8C85e16DA86630f2fc223B05057",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x163ea59837f814240bb07364a9e931b129325548b15adaf23aae7a97e48f6639"
      }
    ],
    "blockNumber": 14668854,
    "cumulativeGasUsed": "4044129",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8aef9accc461478a8ebf528ac71e6f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyTotalAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previusBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"ReturnFromStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"storageTokenAddress\",\"type\":\"address\"}],\"name\":\"__EquityFund_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"storageTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IBorrower\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__EquityFund_init(string,string,address)\":{\"params\":{\"name\":\"- name of the token\",\"storageTokenAddress\":\"- address of ERC20 token contract which will be stored in fund\",\"symbol\":\"- token symbol\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,uint256)\":{\"params\":{\"maxLoss\":\"- The maximum acceptable loss to sustain on withdrawal.  Up to that amount of shares can be burnt to cover losses on withdrawal.  Represented in uint256, where 1 equal 0.01%.\",\"maxShares\":\"- How many shares to try redeem for tokens, if will be not possible redeem all, then will be redeemed only available partially\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Borrowed(address,uint256,uint256,uint256)\":{\"notice\":\"Emit when strategy borrow some assets\"},\"Deposit(uint256,uint256,address)\":{\"notice\":\"Fired when new amount of tokens deposited and shares a issued for holder\"},\"ReturnFromStrategy(uint256,uint256,uint256,uint256)\":{\"notice\":\"Emit when assets returned from strategy\"},\"Withdraw(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Fired when assets for a given shares a withdrawn\"}},\"kind\":\"user\",\"methods\":{\"assets()\":{\"notice\":\"Contract of token which will be stored in this vault\"},\"borrow(uint256)\":{\"notice\":\"Strategy can requests some credit which then must return\"},\"creditAvailable()\":{\"notice\":\"Estimate how much strategy can borrow from this Lender.\"},\"deposit(uint256)\":{\"notice\":\"Add deposit to fund storage and issues shares for a recepient Mint shares based on expected value under control at the moment Not collect real assets from borrowers, as it allow manipulate issue rate Will transfer `amount` of tokens from `message sender` and issue shares to him\"},\"initialize(string,string,address,address)\":{\"notice\":\"name - name of the token symbol - token symbol storageTokenAddress - address of ERC20 token contract which will be stored in fund strategyAddress - address of strategy which will stake tokens\"},\"totalAssets()\":{\"notice\":\"Returns the total quantity of all assets under control of this fund, whether they're loaned out to a strategy, or currently held in the fund.\"},\"totalDebt()\":{\"notice\":\"Amount of tokens that all strategies have borrowed.\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraws the calling account's tokens from this Vault, redeeming  amount `maxShares` for an appropriate amount of tokens.  As holder address will be used message sender\"}},\"notice\":\"Simple investment vault, which allow store tokens in vault Tokens can be borrowed by strategy and returned with percents And vault allow widthdraw tokens in proportion of shares which user have\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InvestmentVault.sol\":\"InvestmentVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EquityFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./SimpleVault.sol\\\";\\n\\n/// Implementation of abstract equity fund\\n/// It allow users to deposit tokens in exchange of shares of this fund\\n/// And allow exchange shares to widthdraw tokens stored in fund\\ncontract EquityFund is Initializable, SimpleVault, ERC20Upgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    /// 100% or 10k basis points for loss\\n    uint256 constant MAX_BASIS_POINTS = 10_000;\\n\\n    /// Fired when new amount of tokens deposited and shares a issued for holder\\n    event Deposit(uint256 amount, uint256 shares, address holder);\\n    /// Fired when assets for a given shares a withdrawn\\n    event Withdraw(address holder, uint256 maxShares, uint256 maxLoss, uint256 shares, uint256 amount, uint256 totalShares);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @param storageTokenAddress - address of ERC20 token contract which will be stored in fund\\n    /// @param name - name of the token\\n    /// @param symbol - token symbol\\n    function __EquityFund_init(string memory name, string memory symbol, address storageTokenAddress) initializer public {\\n        __ERC20_init(name, symbol);\\n        __ERC20Burnable_init();\\n        __Ownable_init();\\n        __SimpleVault_init(storageTokenAddress);\\n    }\\n\\n    /// Add deposit to fund storage and issues shares for a recepient\\n    /// Mint shares based on expected value under control at the moment\\n    /// Not collect real assets from borrowers, as it allow manipulate issue rate\\n    /// Will transfer `amount` of tokens from `message sender` and issue shares to him\\n    function deposit(uint256 amount) external nonReentrant returns (uint256) {\\n        // Do not allow specify sender and holder, \\n        //  as it allow someone use not his tokens for issue shares to someone else\\n        require(amount > 0, \\\"For deposit amount must be non-zero\\\");\\n\\n        // Issue new shares (needs to be done before taking deposit to be accurate)\\n        uint256 shares = _issueShares(amount, msg.sender);\\n\\n        // Transfer tokens from sender to this contract\\n        _receiveAssetsFrom(msg.sender, amount);\\n\\n        emit Deposit(amount, shares, msg.sender);\\n        return shares;\\n    }\\n\\n    /// Withdraws the calling account's tokens from this Vault, redeeming\\n    ///  amount `maxShares` for an appropriate amount of tokens.\\n    ///  As holder address will be used message sender\\n    /// @param maxShares - How many shares to try redeem for tokens, if will be not possible redeem all, then will be redeemed only available partially\\n    /// @param maxLoss - The maximum acceptable loss to sustain on withdrawal.\\n    ///  Up to that amount of shares can be burnt to cover losses on withdrawal.\\n    ///  Represented in uint256, where 1 equal 0.01%.\\n    function withdraw(uint256 maxShares, uint256 maxLoss) external nonReentrant returns (uint256) {\\n        // Do not allow specify holder address. If method called by someone other, \\n        //  he can burn shares someone another by calling this method\\n        require(maxShares > 0, \\\"Shares amount must be non-zero\\\");\\n        require(maxLoss <= MAX_BASIS_POINTS, \\\"maxLoss is bigger 100%\\\");\\n        require(maxShares <= balanceOf(msg.sender), \\\"More shares specified, sender not have enough\\\");\\n\\n        // Reddem shares for some amount of tokens\\n        (uint256 shares, uint256 amount) = _redeemShares(maxShares, maxLoss);\\n\\n        // Send remaining balance to msg.sender (minus fee)\\n        _transferAssets(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, maxShares, maxLoss, shares, amount, totalSupply());\\n        return amount;\\n    }\\n\\n    /// Issues `amount` fund shares to `holder`.\\n    /// Shares must be issued prior to taking on new collateral, or\\n    /// calculation will be wrong. This means that only *trusted* tokens\\n    /// (with no capability for exploitative behavior) can be used.\\n    function _issueShares(uint256 amount, address holder) internal virtual returns (uint256) {\\n        uint256 shares = _estimateShares(amount);\\n        _mint(holder, shares);\\n        return shares;\\n    }\\n\\n    /// Redeem up to `maxShares` for assets, and return `redeemd shares, assets ammount`.\\n    /// Allow `maxLoss`\\n    function _redeemShares(uint256 maxShares, uint256 maxLoss) internal virtual returns (uint256, uint256) {\\n        // Calculate how much tokens must be withdraw based on current assets of the fund\\n        uint256 value = _estimateShareValue(maxShares);\\n        // Burn shares (full value of what is being withdrawn)\\n        _burn(msg.sender, maxShares);\\n        return (maxShares, value);\\n    }\\n\\n    /// Estimate how much shares should be issued if given amount will be added to fund\\n    function _estimateShares(uint256 amount) internal virtual view returns (uint256) {\\n        require(amount > 0, \\\"For issue shares amount must be non-zero\\\");\\n        uint256 totalShares = totalSupply();\\n\\n        if (totalShares == 0) {\\n            // No existing shares, so mint 1:1\\n            return amount;\\n        }\\n\\n        // Mint amount of shares based on what the fund is managing overall\\n        // if sqrt(totalSupply()) > 1e39, this could potentially revert\\n        // TODO: use safe math\\n        // TODO: use rounding calculation\\n        uint256 shares = amount * totalShares / _expectedAssets();\\n        require(shares > 0, \\\"Incorrect calcualtion of shares during issing\\\"); // rounding calcualtion must fix it\\n\\n        return shares;\\n    }\\n\\n    /// Estimate how much tokens must be withdraw based on current assets of the fund \\n    function _estimateShareValue(uint256 shares) internal virtual view returns (uint256) {\\n        require(shares > 0, \\\"For estimate value shares amount must be non-zero\\\");\\n        \\n        uint256 totalShares = totalSupply();\\n        require(shares <= totalShares, \\\"Cannot calcualte value for not existing shares\\\");\\n        \\n        // Determines the current value of `shares`.\\n        // if sqrt(_expectedAssets()) >>> 1e39, this could potentially revert\\n        // TODO: use safe math\\n        // TODO: use rounding calculation\\n        uint256 expectedAssets = _expectedAssets();\\n        uint256 value = shares * expectedAssets / totalShares;\\n        require(shares > 0, \\\"Incorrect calcualtion of share's value\\\"); // rounding calcualtion must fix it\\n\\n        return value;\\n    }\\n\\n    /// Calculate how much assets currently have fund \\n    function _expectedAssets() internal virtual view returns (uint256) {\\n        // Need override with calcualtions based on farming method\\n        return _availableAssets();\\n    }\\n}\\n\",\"keccak256\":\"0xf8df6c0f19436d27a7235fd64f95ca5cc86ff03f0842115380b10627c0710539\",\"license\":\"MIT\"},\"contracts/IBorrower.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// Interface of Borrowe which need implement to allow communicate with Lender\\ninterface IBorrower {\\n    /// Token address which this borrower want to borrow\\n    function want() external view returns (address);\\n    /// Lender address from which this borrower want to request token.\\n    function lender() external view returns (address);\\n    /// Try to widthdraw given amount and return loss\\n    function withdraw(uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Strategy is currently managing,\\n     *  denominated in terms of `want` tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Strategy if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Strategy relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Strategy and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function totalAssets() external view returns (uint256);\\n}\",\"keccak256\":\"0xeb533fe48e916cd194e05c909e4f318d2b231453c0e9cebecc195d590b33255d\",\"license\":\"MIT\"},\"contracts/ILender.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\ninterface ILender {\\n\\n    /**\\n     * View how much the Lender allow to increase this Borrower's borrow limit.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * Allow borrow some money from the Lender.\\n     */\\n    function borrow(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x50fce648d0a76ba11445df1a38b7d6d8de4f34256d02303aa8cc4762576dc49d\",\"license\":\"MIT\"},\"contracts/InvestmentVault.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./EquityFund.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./Lender.sol\\\";\\n\\n/// Simple investment vault, which allow store tokens in vault\\n/// Tokens can be borrowed by strategy and returned with percents\\n/// And vault allow widthdraw tokens in proportion of shares which user have\\ncontract InvestmentVault is Initializable, EquityFund, Lender {\\n\\n    uint256 constant DEGRADATION_COEFFICIENT = 10 ** 18;\\n    \\n    /// name - name of the token\\n    /// symbol - token symbol\\n    /// storageTokenAddress - address of ERC20 token contract which will be stored in fund\\n    /// strategyAddress - address of strategy which will stake tokens\\n    function initialize(\\n        string memory name, \\n        string memory symbol, \\n        address storageTokenAddress, \\n        address strategyAddress\\n    ) initializer public {\\n        __EquityFund_init(name, symbol, storageTokenAddress);\\n        __Lender_init(strategyAddress);\\n    }\\n\\n    /// Redeem up to `maxShares` for assets, and return `redeemd shares, assets ammount`.\\n    /// Allow `maxLoss`\\n    function _redeemShares(uint256 maxShares, uint256 maxLoss) internal override returns (uint256, uint256) {\\n        uint256 shares = maxShares; // May reduce this number below\\n\\n        // Calculate how much tokens must be withdraw based on current assets of the fund\\n        uint256 value = _estimateShareValue(maxShares);\\n        \\n        if (value > _availableAssets()) {\\n            // try return assets under control of the fund\\n            uint256 totalLoss = _returnAssets(value);\\n\\n            uint256 fundBalance = _availableAssets();\\n            if (value > fundBalance) {\\n                // We have withdrawn everything possible out\\n                // but we still don't have enough to fully pay them back, so adjust\\n                // to the total amount we've freed up through forced withdrawals\\n                value = fundBalance;\\n                // Burn shares that corresponds to what Vault has on-hand,\\n                // including the losses that were incurred above during withdrawals\\n                // TODO: use safe math\\n                shares = _estimateShares(value + totalLoss);\\n\\n                // Check current shares must be lower than maxShare.\\n                // This implies that large withdrawals within certain parameter ranges might fail.\\n                require(shares <= maxShares, \\\"Shares which will be burn with losses is bigger than given maxShares\\\");\\n            }\\n\\n            // This loss protection is put in place to revert if losses from\\n            // withdrawing are more than what is considered acceptable\\n            // TODO: use safe math\\n            // TODO: Maybe use rounding calculation\\n            require(totalLoss <= (value + totalLoss) * maxLoss / MAX_BASIS_POINTS, \\\"Total loss bigger than acceptable maxLoss\\\");\\n        }\\n\\n        // Burn shares (full value of what is being withdrawn)\\n        _burn(msg.sender, shares);\\n\\n        return (shares, value);\\n    }\\n\\n    /// Calculate how much assets currently have fund \\n    /// Expectation based on real assets minus probably lost assets\\n    function _expectedAssets() internal override view returns (uint256) {\\n        return totalAssets() - _probablyLostAssets();\\n    }\\n\\n    /// Assets can be lost because exists time difference between \\n    /// moment when assets was borrowed \\n    /// and moment when current assets of borrowers was updated. \\n    function _probablyLostAssets() internal view returns (uint256) {\\n        // TODO: Currently Lender contract directly request current assets in strategy\\n        //  Need make reports of assets asynchronously and \\n        //  calculate probably lost assets between reports\\n        //  Maybe need move this calcualtions to strategy\\n        return 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5f8395c88a8cef1c169e7e92745de593fd851d58dd32e4b8b7233a51987c19cb\",\"license\":\"MIT\"},\"contracts/Lender.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./SimpleVault.sol\\\";\\nimport \\\"./IBorrower.sol\\\";\\nimport \\\"./ILender.sol\\\";\\n\\n/// Implementation of abstract lender contract\\n/// It allow to borrow tokens from this contract by only one whitelabeled strategy\\n/// And also have internal method,\\n/// which can be used in inherited contract to widthdraw tokens from strategy\\ncontract Lender is ILender, Initializable, SimpleVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    /// Amount of tokens that all strategies have borrowed.\\n    uint256 public totalDebt;\\n\\n    IBorrower public strategy;\\n\\n    /// Emit when strategy borrow some assets\\n    event Borrowed(address strategy, uint256 amount, uint256 strategyTotalAssets, uint256 totalDebt);\\n    /// Emit when assets returned from strategy\\n    event ReturnFromStrategy(uint256 previusBalance, uint256 targetBalance, uint256 requestedAmount, uint256 loss);\\n\\n    // function initialize(address strategyAddress, address storageTokenAddress) initializer public {\\n    //     __Ownable_init();\\n    //     __SimpleVault_init(storageTokenAddress);\\n    //     __Lender_init(strategyAddress);\\n    // }\\n\\n    function __Lender_init(address strategyAddress) internal {\\n        setStrategy(strategyAddress);\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(address(strategy) == _msgSender(), \\\"Lender: caller is not a strategy\\\");\\n        _;\\n    }\\n\\n    function setStrategy(address strategyAddress) public onlyOwner {\\n        strategy = IBorrower(strategyAddress);\\n\\n        // TODO: check also lender is correct when adding strategy\\n        require(strategy.want() == address(assets), \\\"Strategy do not want vault assets\\\");\\n    }\\n\\n    /// Strategy can requests some credit which then must return\\n    function borrow(uint256 amount) public override onlyStrategy nonReentrant {\\n        require(amount > 0, \\\"Borrowing amount must be positive\\\");\\n        require(amount <= _availableAssets(), \\\"Requested more then available for a borrowing\\\");\\n\\n        // TODO: use safe math\\n        totalDebt += amount;\\n      \\n        _transferAssets(msg.sender, amount);\\n\\n        emit Borrowed(msg.sender, amount, IBorrower(msg.sender).totalAssets(), totalDebt);\\n    }\\n\\n    /// Estimate how much strategy can borrow from this Lender.\\n    function creditAvailable() external override onlyStrategy view returns (uint256) {\\n        // TODO: When will be borrow ratio need calculate based on it\\n        return _availableAssets();\\n    } \\n\\n    /// Hook which must return assets to lender if it possible\\n    /// @param targetBalance - balance which fund must have at the end of hook executuin\\n    /// @return totalLoss - loss of all performed actions\\n    function _returnAssets(uint256 targetBalance) internal virtual returns (uint256) {\\n        // Calcualte amount of assets which should be widthdraw\\n        // TODO: use safe math\\n        uint256 currentAssets = _availableAssets();\\n        uint256 amountNeed = targetBalance - currentAssets;\\n\\n        if (totalDebt < amountNeed) {\\n            totalDebt = 0;\\n        } else {\\n            totalDebt -= amountNeed;\\n        }\\n\\n        uint256 loss = strategy.withdraw(amountNeed);\\n        emit ReturnFromStrategy(currentAssets, targetBalance, amountNeed, loss);\\n\\n        return loss;\\n    }\\n\\n    /// Returns the total quantity of all assets under control of this\\n    /// fund, whether they're loaned out to a strategy, or currently held in\\n    /// the fund.\\n    function totalAssets() public view returns (uint256) {\\n        return _availableAssets() + strategy.totalAssets();\\n    }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x853b0042f19b3f447fb628083eddb4c657f45b1d7d9302a1b8ee66e62f5d6345\",\"license\":\"MIT\"},\"contracts/SimpleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * SimpleVault for store underlaing \\\"assets\\\", \\n * where assets represented as ERC20 token. Allow borrow assets for another accounts.\\n */\\ncontract SimpleVault is Initializable {\\n    \\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// Contract of token which will be stored in this vault\\n    IERC20Upgradeable public assets;\\n    \\n    /**\\n     * @dev Sets the values for {assets}.\\n     *\\n     * Init ERC20 based contract with given address\\n     */\\n    function __SimpleVault_init(address storageTokenAddress) initializer internal {\\n        assets = IERC20Upgradeable(storageTokenAddress);\\n    }\\n\\n    /// Transfer assets from given address to this contract\\n    function _receiveAssetsFrom(address from, uint256 value) internal {\\n        _transferAssetsFrom(from, address(this), value);\\n    }\\n\\n    /// Safely transfer assets token from given address to sender\\n    function _transferAssetsFrom(address from, address to, uint256 value) internal {\\n        assets.safeTransferFrom(from, to, value);\\n    }\\n\\n    /// Safely transfer assets token to sender\\n    function _transferAssets(address to, uint256 value) internal {\\n        assets.safeTransfer(to, value);\\n    }\\n\\n    function _increaseAssetsAllowance(address spender, uint256 value) internal {\\n        assets.safeIncreaseAllowance(spender, value);\\n    }\\n\\n    function _decreaseAssetsAllowance(address spender, uint256 value) internal {\\n        assets.safeDecreaseAllowance(spender, value);\\n    }\\n\\n\\n    /// Assets which are directly available for fund\\n    function _availableAssets() internal view returns (uint256) {\\n        return assets.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xdf3197130bf3a064f2d777d2fd173be6b068024b780e204c8a890b89328bbefc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506000620000266001620000ae60201b60201c565b905080156200004b576001600060016101000a81548160ff0219169083151502179055505b8015620000a75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516200009e91906200020f565b60405180910390a15b50620002cf565b60008060019054906101000a900460ff1615620001385760018260ff16148015620000ec5750620000ea30620001b460201b620014421760201c565b155b6200012e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000125906200022c565b60405180910390fd5b60009050620001af565b8160ff1660008054906101000a900460ff1660ff161062000190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000187906200022c565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b620001e2816200026c565b82525050565b6000620001f7602e836200024e565b9150620002048262000280565b604082019050919050565b6000602082019050620002266000830184620001d7565b92915050565b600060208201905081810360008301526200024781620001e8565b9050919050565b600082825260208201905092915050565b600060ff82169050919050565b600062000279826200025f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b61480280620002df6000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806371a97305116100f9578063a9059cbb11610097578063d5d29b0011610071578063d5d29b00146104d2578063dd62ed3e146104ee578063f2fde38b1461051e578063fc7b9c181461053a576101a9565b8063a9059cbb14610456578063b6b55f2514610486578063c5ebeaec146104b6576101a9565b80638f15b414116100d35780638f15b414146103ce57806395d89b41146103ea578063a457c2d714610408578063a8c62e7614610438576101a9565b806371a973051461037657806379cc6790146103945780638da5cb5b146103b0576101a9565b8063313ce5671161016657806342966c681161014057806342966c68146102f0578063441a3e701461030c57806370a082311461033c578063715018a61461036c576101a9565b8063313ce5671461028657806333a100ca146102a457806339509351146102c0576101a9565b806301e1d114146101ae57806306fdde03146101cc578063095ea7b3146101ea578063112c1f9b1461021a57806318160ddd1461023857806323b872dd14610256575b600080fd5b6101b6610558565b6040516101c391906139f2565b60405180910390f35b6101d4610611565b6040516101e191906135b0565b60405180910390f35b61020460048036038101906101ff9190612cb1565b6106a3565b6040516102119190613544565b60405180910390f35b6102226106c6565b60405161022f91906139f2565b60405180910390f35b61024061076c565b60405161024d91906139f2565b60405180910390f35b610270600480360381019061026b9190612c62565b610776565b60405161027d9190613544565b60405180910390f35b61028e6107a5565b60405161029b9190613a89565b60405180910390f35b6102be60048036038101906102b99190612bd4565b6107ae565b005b6102da60048036038101906102d59190612cb1565b61099d565b6040516102e79190613544565b60405180910390f35b61030a60048036038101906103059190612e28565b6109d4565b005b61032660048036038101906103219190612e7a565b6109e8565b60405161033391906139f2565b60405180910390f35b61035660048036038101906103519190612bd4565b610b81565b60405161036391906139f2565b60405180910390f35b610374610bca565b005b61037e610c52565b60405161038b919061357a565b60405180910390f35b6103ae60048036038101906103a99190612cb1565b610c78565b005b6103b8610c98565b6040516103c59190613423565b60405180910390f35b6103e860048036038101906103e39190612d95565b610cc2565b005b6103f2610d66565b6040516103ff91906135b0565b60405180910390f35b610422600480360381019061041d9190612cb1565b610df8565b60405161042f9190613544565b60405180910390f35b610440610e6f565b60405161044d919061355f565b60405180910390f35b610470600480360381019061046b9190612cb1565b610e95565b60405161047d9190613544565b60405180910390f35b6104a0600480360381019061049b9190612e28565b610eb8565b6040516104ad91906139f2565b60405180910390f35b6104d060048036038101906104cb9190612e28565b610faf565b005b6104ec60048036038101906104e79190612d16565b61120b565b005b61050860048036038101906105039190612c26565b6112bd565b60405161051591906139f2565b60405180910390f35b61053860048036038101906105339190612bd4565b611344565b005b61054261143c565b60405161054f91906139f2565b60405180910390f35b600060fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190612e51565b610602611465565b61060c9190613b2c565b905090565b60606036805461062090613d32565b80601f016020809104026020016040519081016040528092919081815260200182805461064c90613d32565b80156106995780601f1061066e57610100808354040283529160200191610699565b820191906000526020600020905b81548152906001019060200180831161067c57829003601f168201915b5050505050905090565b6000806106ae611516565b90506106bb81858561151e565b600191505092915050565b60006106d0611516565b73ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690613872565b60405180910390fd5b610767611465565b905090565b6000603554905090565b600080610781611516565b905061078e8582856116e9565b610799858585611775565b60019150509392505050565b60006012905090565b6107b6611516565b73ffffffffffffffffffffffffffffffffffffffff166107d4610c98565b73ffffffffffffffffffffffffffffffffffffffff161461082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190613812565b60405180910390fd5b8060fc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109449190612bfd565b73ffffffffffffffffffffffffffffffffffffffff161461099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099190613772565b60405180910390fd5b50565b6000806109a8611516565b90506109c98185856109ba85896112bd565b6109c49190613b2c565b61151e565b600191505092915050565b6109e56109df611516565b826119f9565b50565b6000600260c9541415610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790613952565b60405180910390fd5b600260c98190555060008311610a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a72906136f2565b60405180910390fd5b612710821115610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790613832565b60405180910390fd5b610ac933610b81565b831115610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290613712565b60405180910390fd5b600080610b188585611bd2565b91509150610b263382611cf6565b7fb7ee00edafdb5db3a1b52a5789a6b562eb48268842d113dbfe860b6f86e5f5953386868585610b5461076c565b604051610b66969594939291906134e3565b60405180910390a18092505050600160c98190555092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bd2611516565b73ffffffffffffffffffffffffffffffffffffffff16610bf0610c98565b73ffffffffffffffffffffffffffffffffffffffff1614610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d90613812565b60405180910390fd5b610c506000611d47565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c8a82610c84611516565b836116e9565b610c9482826119f9565b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610cce6001611e0d565b90508015610cf2576001600060016101000a81548160ff0219169083151502179055505b610cfd85858561120b565b610d0682611efd565b8015610d5f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d569190613595565b60405180910390a15b5050505050565b606060378054610d7590613d32565b80601f0160208091040260200160405190810160405280929190818152602001828054610da190613d32565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b5050505050905090565b600080610e03611516565b90506000610e1182866112bd565b905083811015610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90613992565b60405180910390fd5b610e63828686840361151e565b60019250505092915050565b60fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ea0611516565b9050610ead818585611775565b600191505092915050565b6000600260c9541415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790613952565b60405180910390fd5b600260c98190555060008211610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290613752565b60405180910390fd5b6000610f578333611f09565b9050610f633384611f2b565b7fd68606c673aecac7ce24ec44fd7d77b401356dfd76fe9b36cb58e579c4220aed838233604051610f9693929190613a0d565b60405180910390a180915050600160c981905550919050565b610fb7611516565b73ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90613872565b60405180910390fd5b600260c954141561108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390613952565b60405180910390fd5b600260c981905550600081116110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613672565b60405180910390fd5b6110df611465565b811115611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890613692565b60405180910390fd5b8060fb60008282546111339190613b2c565b925050819055506111443382611cf6565b7fc4381c9c7b508979896c55381c1cb8c2aef28d753cff7661f9cd87b9a14584f833823373ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190612e51565b60fb546040516111f8949392919061349e565b60405180910390a1600160c98190555050565b60006112176001611e0d565b9050801561123b576001600060016101000a81548160ff0219169083151502179055505b6112458484611f3a565b61124d611f97565b611255611fe8565b61125e82612041565b80156112b75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112ae9190613595565b60405180910390a15b50505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61134c611516565b73ffffffffffffffffffffffffffffffffffffffff1661136a610c98565b73ffffffffffffffffffffffffffffffffffffffff16146113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790613812565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790613612565b60405180910390fd5b61143981611d47565b50565b60fb5481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114c19190613423565b60206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190612e51565b905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561158e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611585906138b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f590613632565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116dc91906139f2565b60405180910390a3505050565b60006116f584846112bd565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461176f5781811015611761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175890613652565b60405180910390fd5b61176e848484840361151e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117dc90613892565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184c906135d2565b60405180910390fd5b61186083838361210f565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118de906136b2565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197c9190613b2c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119e091906139f2565b60405180910390a36119f3848484612114565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090613852565b60405180910390fd5b611a758260008361210f565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af3906135f2565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611b549190613c0d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611bb991906139f2565b60405180910390a3611bcd83600084612114565b505050565b60008060008490506000611be586612119565b9050611bef611465565b811115611cdd576000611c0182612221565b90506000611c0d611465565b905080831115611c7457809250611c2e8284611c299190613b2c565b612368565b935087841115611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a906137d2565b60405180910390fd5b5b612710878385611c849190613b2c565b611c8e9190613bb3565b611c989190613b82565b821115611cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd1906137b2565b60405180910390fd5b50505b611ce733836119f9565b81819350935050509250929050565b611d438282600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661243a9092919063ffffffff16565b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff1615611e845760018260ff16148015611e3c5750611e3a30611442565b155b611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7290613792565b60405180910390fd5b60009050611ef8565b8160ff1660008054906101000a900460ff1660ff1610611ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed090613792565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b611f06816107ae565b50565b600080611f1584612368565b9050611f2183826124c0565b8091505092915050565b611f36823083612621565b5050565b600060019054906101000a900460ff16611f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8090613912565b60405180910390fd5b611f938282612675565b5050565b600060019054906101000a900460ff16611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd90613912565b60405180910390fd5b565b600060019054906101000a900460ff16612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202e90613912565b60405180910390fd5b61203f6126f6565b565b600061204d6001611e0d565b90508015612071576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561210b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516121029190613595565b60405180910390a15b5050565b505050565b505050565b600080821161215d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612154906139b2565b60405180910390fd5b600061216761076c565b9050808311156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390613972565b60405180910390fd5b60006121b6612757565b905060008282866121c79190613bb3565b6121d19190613b82565b905060008511612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220d906137f2565b60405180910390fd5b809350505050919050565b60008061222c611465565b90506000818461223c9190613c0d565b90508060fb54101561225557600060fb8190555061226f565b8060fb60008282546122679190613c0d565b925050819055505b600060fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016122cc91906139f2565b602060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231e9190612e51565b90507fff55ad369e3b5d0516f3a9185142a1da422388ff2b73e04db4e7fd3fd76d3583838684846040516123559493929190613a44565b60405180910390a1809350505050919050565b60008082116123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a3906138f2565b60405180910390fd5b60006123b661076c565b905060008114156123ca5782915050612435565b60006123d4612757565b82856123e09190613bb3565b6123ea9190613b82565b90506000811161242f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612426906136d2565b60405180910390fd5b80925050505b919050565b6124bb8363a9059cbb60e01b8484604051602401612459929190613475565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612778565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612530576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612527906139d2565b60405180910390fd5b61253c6000838361210f565b806035600082825461254e9190613b2c565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125a49190613b2c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161260991906139f2565b60405180910390a361261d60008383612114565b5050565b612670838383600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661283f909392919063ffffffff16565b505050565b600060019054906101000a900460ff166126c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bb90613912565b60405180910390fd5b81603690805190602001906126da929190612a60565b5080603790805190602001906126f1929190612a60565b505050565b600060019054906101000a900460ff16612745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273c90613912565b60405180910390fd5b612755612750611516565b611d47565b565b60006127616128c8565b612769610558565b6127739190613c0d565b905090565b60006127da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128cd9092919063ffffffff16565b905060008151111561283a57808060200190518101906127fa9190612ced565b612839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283090613932565b60405180910390fd5b5b505050565b6128c2846323b872dd60e01b8585856040516024016128609392919061343e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612778565b50505050565b600090565b60606128dc84846000856128e5565b90509392505050565b60608247101561292a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292190613732565b60405180910390fd5b61293385611442565b612972576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612969906138d2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161299b919061340c565b60006040518083038185875af1925050503d80600081146129d8576040519150601f19603f3d011682016040523d82523d6000602084013e6129dd565b606091505b50915091506129ed8282866129f9565b92505050949350505050565b60608315612a0957829050612a59565b600083511115612a1c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5091906135b0565b60405180910390fd5b9392505050565b828054612a6c90613d32565b90600052602060002090601f016020900481019282612a8e5760008555612ad5565b82601f10612aa757805160ff1916838001178555612ad5565b82800160010185558215612ad5579182015b82811115612ad4578251825591602001919060010190612ab9565b5b509050612ae29190612ae6565b5090565b5b80821115612aff576000816000905550600101612ae7565b5090565b6000612b16612b1184613ac9565b613aa4565b905082815260208101848484011115612b2e57600080fd5b612b39848285613cf0565b509392505050565b600081359050612b5081614787565b92915050565b600081519050612b6581614787565b92915050565b600081519050612b7a8161479e565b92915050565b600082601f830112612b9157600080fd5b8135612ba1848260208601612b03565b91505092915050565b600081359050612bb9816147b5565b92915050565b600081519050612bce816147b5565b92915050565b600060208284031215612be657600080fd5b6000612bf484828501612b41565b91505092915050565b600060208284031215612c0f57600080fd5b6000612c1d84828501612b56565b91505092915050565b60008060408385031215612c3957600080fd5b6000612c4785828601612b41565b9250506020612c5885828601612b41565b9150509250929050565b600080600060608486031215612c7757600080fd5b6000612c8586828701612b41565b9350506020612c9686828701612b41565b9250506040612ca786828701612baa565b9150509250925092565b60008060408385031215612cc457600080fd5b6000612cd285828601612b41565b9250506020612ce385828601612baa565b9150509250929050565b600060208284031215612cff57600080fd5b6000612d0d84828501612b6b565b91505092915050565b600080600060608486031215612d2b57600080fd5b600084013567ffffffffffffffff811115612d4557600080fd5b612d5186828701612b80565b935050602084013567ffffffffffffffff811115612d6e57600080fd5b612d7a86828701612b80565b9250506040612d8b86828701612b41565b9150509250925092565b60008060008060808587031215612dab57600080fd5b600085013567ffffffffffffffff811115612dc557600080fd5b612dd187828801612b80565b945050602085013567ffffffffffffffff811115612dee57600080fd5b612dfa87828801612b80565b9350506040612e0b87828801612b41565b9250506060612e1c87828801612b41565b91505092959194509250565b600060208284031215612e3a57600080fd5b6000612e4884828501612baa565b91505092915050565b600060208284031215612e6357600080fd5b6000612e7184828501612bbf565b91505092915050565b60008060408385031215612e8d57600080fd5b6000612e9b85828601612baa565b9250506020612eac85828601612baa565b9150509250929050565b612ebf81613c41565b82525050565b612ece81613c53565b82525050565b6000612edf82613afa565b612ee98185613b10565b9350612ef9818560208601613cff565b80840191505092915050565b612f0e81613c96565b82525050565b612f1d81613cba565b82525050565b612f2c81613cde565b82525050565b6000612f3d82613b05565b612f478185613b1b565b9350612f57818560208601613cff565b612f6081613e51565b840191505092915050565b6000612f78602383613b1b565b9150612f8382613e62565b604082019050919050565b6000612f9b602283613b1b565b9150612fa682613eb1565b604082019050919050565b6000612fbe602683613b1b565b9150612fc982613f00565b604082019050919050565b6000612fe1602283613b1b565b9150612fec82613f4f565b604082019050919050565b6000613004601d83613b1b565b915061300f82613f9e565b602082019050919050565b6000613027602183613b1b565b915061303282613fc7565b604082019050919050565b600061304a602d83613b1b565b915061305582614016565b604082019050919050565b600061306d602683613b1b565b915061307882614065565b604082019050919050565b6000613090602d83613b1b565b915061309b826140b4565b604082019050919050565b60006130b3601e83613b1b565b91506130be82614103565b602082019050919050565b60006130d6602d83613b1b565b91506130e18261412c565b604082019050919050565b60006130f9602683613b1b565b91506131048261417b565b604082019050919050565b600061311c602383613b1b565b9150613127826141ca565b604082019050919050565b600061313f602183613b1b565b915061314a82614219565b604082019050919050565b6000613162602e83613b1b565b915061316d82614268565b604082019050919050565b6000613185602983613b1b565b9150613190826142b7565b604082019050919050565b60006131a8604483613b1b565b91506131b382614306565b606082019050919050565b60006131cb602683613b1b565b91506131d68261437b565b604082019050919050565b60006131ee602083613b1b565b91506131f9826143ca565b602082019050919050565b6000613211601683613b1b565b915061321c826143f3565b602082019050919050565b6000613234602183613b1b565b915061323f8261441c565b604082019050919050565b6000613257602083613b1b565b91506132628261446b565b602082019050919050565b600061327a602583613b1b565b915061328582614494565b604082019050919050565b600061329d602483613b1b565b91506132a8826144e3565b604082019050919050565b60006132c0601d83613b1b565b91506132cb82614532565b602082019050919050565b60006132e3602883613b1b565b91506132ee8261455b565b604082019050919050565b6000613306602b83613b1b565b9150613311826145aa565b604082019050919050565b6000613329602a83613b1b565b9150613334826145f9565b604082019050919050565b600061334c601f83613b1b565b915061335782614648565b602082019050919050565b600061336f602e83613b1b565b915061337a82614671565b604082019050919050565b6000613392602583613b1b565b915061339d826146c0565b604082019050919050565b60006133b5603183613b1b565b91506133c08261470f565b604082019050919050565b60006133d8601f83613b1b565b91506133e38261475e565b602082019050919050565b6133f781613c7f565b82525050565b61340681613c89565b82525050565b60006134188284612ed4565b915081905092915050565b60006020820190506134386000830184612eb6565b92915050565b60006060820190506134536000830186612eb6565b6134606020830185612eb6565b61346d60408301846133ee565b949350505050565b600060408201905061348a6000830185612eb6565b61349760208301846133ee565b9392505050565b60006080820190506134b36000830187612eb6565b6134c060208301866133ee565b6134cd60408301856133ee565b6134da60608301846133ee565b95945050505050565b600060c0820190506134f86000830189612eb6565b61350560208301886133ee565b61351260408301876133ee565b61351f60608301866133ee565b61352c60808301856133ee565b61353960a08301846133ee565b979650505050505050565b60006020820190506135596000830184612ec5565b92915050565b60006020820190506135746000830184612f05565b92915050565b600060208201905061358f6000830184612f14565b92915050565b60006020820190506135aa6000830184612f23565b92915050565b600060208201905081810360008301526135ca8184612f32565b905092915050565b600060208201905081810360008301526135eb81612f6b565b9050919050565b6000602082019050818103600083015261360b81612f8e565b9050919050565b6000602082019050818103600083015261362b81612fb1565b9050919050565b6000602082019050818103600083015261364b81612fd4565b9050919050565b6000602082019050818103600083015261366b81612ff7565b9050919050565b6000602082019050818103600083015261368b8161301a565b9050919050565b600060208201905081810360008301526136ab8161303d565b9050919050565b600060208201905081810360008301526136cb81613060565b9050919050565b600060208201905081810360008301526136eb81613083565b9050919050565b6000602082019050818103600083015261370b816130a6565b9050919050565b6000602082019050818103600083015261372b816130c9565b9050919050565b6000602082019050818103600083015261374b816130ec565b9050919050565b6000602082019050818103600083015261376b8161310f565b9050919050565b6000602082019050818103600083015261378b81613132565b9050919050565b600060208201905081810360008301526137ab81613155565b9050919050565b600060208201905081810360008301526137cb81613178565b9050919050565b600060208201905081810360008301526137eb8161319b565b9050919050565b6000602082019050818103600083015261380b816131be565b9050919050565b6000602082019050818103600083015261382b816131e1565b9050919050565b6000602082019050818103600083015261384b81613204565b9050919050565b6000602082019050818103600083015261386b81613227565b9050919050565b6000602082019050818103600083015261388b8161324a565b9050919050565b600060208201905081810360008301526138ab8161326d565b9050919050565b600060208201905081810360008301526138cb81613290565b9050919050565b600060208201905081810360008301526138eb816132b3565b9050919050565b6000602082019050818103600083015261390b816132d6565b9050919050565b6000602082019050818103600083015261392b816132f9565b9050919050565b6000602082019050818103600083015261394b8161331c565b9050919050565b6000602082019050818103600083015261396b8161333f565b9050919050565b6000602082019050818103600083015261398b81613362565b9050919050565b600060208201905081810360008301526139ab81613385565b9050919050565b600060208201905081810360008301526139cb816133a8565b9050919050565b600060208201905081810360008301526139eb816133cb565b9050919050565b6000602082019050613a0760008301846133ee565b92915050565b6000606082019050613a2260008301866133ee565b613a2f60208301856133ee565b613a3c6040830184612eb6565b949350505050565b6000608082019050613a5960008301876133ee565b613a6660208301866133ee565b613a7360408301856133ee565b613a8060608301846133ee565b95945050505050565b6000602082019050613a9e60008301846133fd565b92915050565b6000613aae613abf565b9050613aba8282613d64565b919050565b6000604051905090565b600067ffffffffffffffff821115613ae457613ae3613e22565b5b613aed82613e51565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000613b3782613c7f565b9150613b4283613c7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b7757613b76613d95565b5b828201905092915050565b6000613b8d82613c7f565b9150613b9883613c7f565b925082613ba857613ba7613dc4565b5b828204905092915050565b6000613bbe82613c7f565b9150613bc983613c7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c0257613c01613d95565b5b828202905092915050565b6000613c1882613c7f565b9150613c2383613c7f565b925082821015613c3657613c35613d95565b5b828203905092915050565b6000613c4c82613c5f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ca182613ca8565b9050919050565b6000613cb382613c5f565b9050919050565b6000613cc582613ccc565b9050919050565b6000613cd782613c5f565b9050919050565b6000613ce982613c89565b9050919050565b82818337600083830152505050565b60005b83811015613d1d578082015181840152602081019050613d02565b83811115613d2c576000848401525b50505050565b60006002820490506001821680613d4a57607f821691505b60208210811415613d5e57613d5d613df3565b5b50919050565b613d6d82613e51565b810181811067ffffffffffffffff82111715613d8c57613d8b613e22565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f426f72726f77696e6720616d6f756e74206d75737420626520706f736974697660008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f526571756573746564206d6f7265207468656e20617661696c61626c6520666f60008201527f72206120626f72726f77696e6700000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e636f72726563742063616c6375616c74696f6e206f66207368617265732060008201527f647572696e6720697373696e6700000000000000000000000000000000000000602082015250565b7f53686172657320616d6f756e74206d757374206265206e6f6e2d7a65726f0000600082015250565b7f4d6f726520736861726573207370656369666965642c2073656e646572206e6f60008201527f74206861766520656e6f75676800000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f466f72206465706f73697420616d6f756e74206d757374206265206e6f6e2d7a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b7f537472617465677920646f206e6f742077616e74207661756c7420617373657460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f74616c206c6f737320626967676572207468616e2061636365707461626c60008201527f65206d61784c6f73730000000000000000000000000000000000000000000000602082015250565b7f5368617265732077686963682077696c6c206265206275726e2077697468206c60008201527f6f7373657320697320626967676572207468616e20676976656e206d6178536860208201527f6172657300000000000000000000000000000000000000000000000000000000604082015250565b7f496e636f72726563742063616c6375616c74696f6e206f66207368617265277360008201527f2076616c75650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6d61784c6f737320697320626967676572203130302500000000000000000000600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c656e6465723a2063616c6c6572206973206e6f742061207374726174656779600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f466f722069737375652073686172657320616d6f756e74206d7573742062652060008201527f6e6f6e2d7a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f43616e6e6f742063616c6375616c74652076616c756520666f72206e6f74206560008201527f78697374696e6720736861726573000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f466f7220657374696d6174652076616c75652073686172657320616d6f756e7460008201527f206d757374206265206e6f6e2d7a65726f000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61479081613c41565b811461479b57600080fd5b50565b6147a781613c53565b81146147b257600080fd5b50565b6147be81613c7f565b81146147c957600080fd5b5056fea26469706673582212203831b7d2f784ac721b0e3a91d0741167d081d3eec8d69a1418dc78ce93e0d81a64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806371a97305116100f9578063a9059cbb11610097578063d5d29b0011610071578063d5d29b00146104d2578063dd62ed3e146104ee578063f2fde38b1461051e578063fc7b9c181461053a576101a9565b8063a9059cbb14610456578063b6b55f2514610486578063c5ebeaec146104b6576101a9565b80638f15b414116100d35780638f15b414146103ce57806395d89b41146103ea578063a457c2d714610408578063a8c62e7614610438576101a9565b806371a973051461037657806379cc6790146103945780638da5cb5b146103b0576101a9565b8063313ce5671161016657806342966c681161014057806342966c68146102f0578063441a3e701461030c57806370a082311461033c578063715018a61461036c576101a9565b8063313ce5671461028657806333a100ca146102a457806339509351146102c0576101a9565b806301e1d114146101ae57806306fdde03146101cc578063095ea7b3146101ea578063112c1f9b1461021a57806318160ddd1461023857806323b872dd14610256575b600080fd5b6101b6610558565b6040516101c391906139f2565b60405180910390f35b6101d4610611565b6040516101e191906135b0565b60405180910390f35b61020460048036038101906101ff9190612cb1565b6106a3565b6040516102119190613544565b60405180910390f35b6102226106c6565b60405161022f91906139f2565b60405180910390f35b61024061076c565b60405161024d91906139f2565b60405180910390f35b610270600480360381019061026b9190612c62565b610776565b60405161027d9190613544565b60405180910390f35b61028e6107a5565b60405161029b9190613a89565b60405180910390f35b6102be60048036038101906102b99190612bd4565b6107ae565b005b6102da60048036038101906102d59190612cb1565b61099d565b6040516102e79190613544565b60405180910390f35b61030a60048036038101906103059190612e28565b6109d4565b005b61032660048036038101906103219190612e7a565b6109e8565b60405161033391906139f2565b60405180910390f35b61035660048036038101906103519190612bd4565b610b81565b60405161036391906139f2565b60405180910390f35b610374610bca565b005b61037e610c52565b60405161038b919061357a565b60405180910390f35b6103ae60048036038101906103a99190612cb1565b610c78565b005b6103b8610c98565b6040516103c59190613423565b60405180910390f35b6103e860048036038101906103e39190612d95565b610cc2565b005b6103f2610d66565b6040516103ff91906135b0565b60405180910390f35b610422600480360381019061041d9190612cb1565b610df8565b60405161042f9190613544565b60405180910390f35b610440610e6f565b60405161044d919061355f565b60405180910390f35b610470600480360381019061046b9190612cb1565b610e95565b60405161047d9190613544565b60405180910390f35b6104a0600480360381019061049b9190612e28565b610eb8565b6040516104ad91906139f2565b60405180910390f35b6104d060048036038101906104cb9190612e28565b610faf565b005b6104ec60048036038101906104e79190612d16565b61120b565b005b61050860048036038101906105039190612c26565b6112bd565b60405161051591906139f2565b60405180910390f35b61053860048036038101906105339190612bd4565b611344565b005b61054261143c565b60405161054f91906139f2565b60405180910390f35b600060fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190612e51565b610602611465565b61060c9190613b2c565b905090565b60606036805461062090613d32565b80601f016020809104026020016040519081016040528092919081815260200182805461064c90613d32565b80156106995780601f1061066e57610100808354040283529160200191610699565b820191906000526020600020905b81548152906001019060200180831161067c57829003601f168201915b5050505050905090565b6000806106ae611516565b90506106bb81858561151e565b600191505092915050565b60006106d0611516565b73ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075690613872565b60405180910390fd5b610767611465565b905090565b6000603554905090565b600080610781611516565b905061078e8582856116e9565b610799858585611775565b60019150509392505050565b60006012905090565b6107b6611516565b73ffffffffffffffffffffffffffffffffffffffff166107d4610c98565b73ffffffffffffffffffffffffffffffffffffffff161461082a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082190613812565b60405180910390fd5b8060fc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f1fcd516040518163ffffffff1660e01b815260040160206040518083038186803b15801561090c57600080fd5b505afa158015610920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109449190612bfd565b73ffffffffffffffffffffffffffffffffffffffff161461099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099190613772565b60405180910390fd5b50565b6000806109a8611516565b90506109c98185856109ba85896112bd565b6109c49190613b2c565b61151e565b600191505092915050565b6109e56109df611516565b826119f9565b50565b6000600260c9541415610a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2790613952565b60405180910390fd5b600260c98190555060008311610a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a72906136f2565b60405180910390fd5b612710821115610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790613832565b60405180910390fd5b610ac933610b81565b831115610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290613712565b60405180910390fd5b600080610b188585611bd2565b91509150610b263382611cf6565b7fb7ee00edafdb5db3a1b52a5789a6b562eb48268842d113dbfe860b6f86e5f5953386868585610b5461076c565b604051610b66969594939291906134e3565b60405180910390a18092505050600160c98190555092915050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bd2611516565b73ffffffffffffffffffffffffffffffffffffffff16610bf0610c98565b73ffffffffffffffffffffffffffffffffffffffff1614610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d90613812565b60405180910390fd5b610c506000611d47565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c8a82610c84611516565b836116e9565b610c9482826119f9565b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610cce6001611e0d565b90508015610cf2576001600060016101000a81548160ff0219169083151502179055505b610cfd85858561120b565b610d0682611efd565b8015610d5f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d569190613595565b60405180910390a15b5050505050565b606060378054610d7590613d32565b80601f0160208091040260200160405190810160405280929190818152602001828054610da190613d32565b8015610dee5780601f10610dc357610100808354040283529160200191610dee565b820191906000526020600020905b815481529060010190602001808311610dd157829003601f168201915b5050505050905090565b600080610e03611516565b90506000610e1182866112bd565b905083811015610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90613992565b60405180910390fd5b610e63828686840361151e565b60019250505092915050565b60fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ea0611516565b9050610ead818585611775565b600191505092915050565b6000600260c9541415610f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef790613952565b60405180910390fd5b600260c98190555060008211610f4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4290613752565b60405180910390fd5b6000610f578333611f09565b9050610f633384611f2b565b7fd68606c673aecac7ce24ec44fd7d77b401356dfd76fe9b36cb58e579c4220aed838233604051610f9693929190613a0d565b60405180910390a180915050600160c981905550919050565b610fb7611516565b73ffffffffffffffffffffffffffffffffffffffff1660fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103d90613872565b60405180910390fd5b600260c954141561108c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108390613952565b60405180910390fd5b600260c981905550600081116110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613672565b60405180910390fd5b6110df611465565b811115611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890613692565b60405180910390fd5b8060fb60008282546111339190613b2c565b925050819055506111443382611cf6565b7fc4381c9c7b508979896c55381c1cb8c2aef28d753cff7661f9cd87b9a14584f833823373ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190612e51565b60fb546040516111f8949392919061349e565b60405180910390a1600160c98190555050565b60006112176001611e0d565b9050801561123b576001600060016101000a81548160ff0219169083151502179055505b6112458484611f3a565b61124d611f97565b611255611fe8565b61125e82612041565b80156112b75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112ae9190613595565b60405180910390a15b50505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61134c611516565b73ffffffffffffffffffffffffffffffffffffffff1661136a610c98565b73ffffffffffffffffffffffffffffffffffffffff16146113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790613812565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790613612565b60405180910390fd5b61143981611d47565b50565b60fb5481565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114c19190613423565b60206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190612e51565b905090565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561158e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611585906138b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156115fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f590613632565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516116dc91906139f2565b60405180910390a3505050565b60006116f584846112bd565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461176f5781811015611761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175890613652565b60405180910390fd5b61176e848484840361151e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156117e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117dc90613892565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184c906135d2565b60405180910390fd5b61186083838361210f565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118de906136b2565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197c9190613b2c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119e091906139f2565b60405180910390a36119f3848484612114565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6090613852565b60405180910390fd5b611a758260008361210f565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af3906135f2565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611b549190613c0d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611bb991906139f2565b60405180910390a3611bcd83600084612114565b505050565b60008060008490506000611be586612119565b9050611bef611465565b811115611cdd576000611c0182612221565b90506000611c0d611465565b905080831115611c7457809250611c2e8284611c299190613b2c565b612368565b935087841115611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a906137d2565b60405180910390fd5b5b612710878385611c849190613b2c565b611c8e9190613bb3565b611c989190613b82565b821115611cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd1906137b2565b60405180910390fd5b50505b611ce733836119f9565b81819350935050509250929050565b611d438282600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661243a9092919063ffffffff16565b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff1615611e845760018260ff16148015611e3c5750611e3a30611442565b155b611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7290613792565b60405180910390fd5b60009050611ef8565b8160ff1660008054906101000a900460ff1660ff1610611ed9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed090613792565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b611f06816107ae565b50565b600080611f1584612368565b9050611f2183826124c0565b8091505092915050565b611f36823083612621565b5050565b600060019054906101000a900460ff16611f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8090613912565b60405180910390fd5b611f938282612675565b5050565b600060019054906101000a900460ff16611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd90613912565b60405180910390fd5b565b600060019054906101000a900460ff16612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202e90613912565b60405180910390fd5b61203f6126f6565b565b600061204d6001611e0d565b90508015612071576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561210b5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516121029190613595565b60405180910390a15b5050565b505050565b505050565b600080821161215d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612154906139b2565b60405180910390fd5b600061216761076c565b9050808311156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390613972565b60405180910390fd5b60006121b6612757565b905060008282866121c79190613bb3565b6121d19190613b82565b905060008511612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220d906137f2565b60405180910390fd5b809350505050919050565b60008061222c611465565b90506000818461223c9190613c0d565b90508060fb54101561225557600060fb8190555061226f565b8060fb60008282546122679190613c0d565b925050819055505b600060fc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b81526004016122cc91906139f2565b602060405180830381600087803b1580156122e657600080fd5b505af11580156122fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231e9190612e51565b90507fff55ad369e3b5d0516f3a9185142a1da422388ff2b73e04db4e7fd3fd76d3583838684846040516123559493929190613a44565b60405180910390a1809350505050919050565b60008082116123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a3906138f2565b60405180910390fd5b60006123b661076c565b905060008114156123ca5782915050612435565b60006123d4612757565b82856123e09190613bb3565b6123ea9190613b82565b90506000811161242f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612426906136d2565b60405180910390fd5b80925050505b919050565b6124bb8363a9059cbb60e01b8484604051602401612459929190613475565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612778565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612530576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612527906139d2565b60405180910390fd5b61253c6000838361210f565b806035600082825461254e9190613b2c565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125a49190613b2c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161260991906139f2565b60405180910390a361261d60008383612114565b5050565b612670838383600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661283f909392919063ffffffff16565b505050565b600060019054906101000a900460ff166126c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bb90613912565b60405180910390fd5b81603690805190602001906126da929190612a60565b5080603790805190602001906126f1929190612a60565b505050565b600060019054906101000a900460ff16612745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273c90613912565b60405180910390fd5b612755612750611516565b611d47565b565b60006127616128c8565b612769610558565b6127739190613c0d565b905090565b60006127da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128cd9092919063ffffffff16565b905060008151111561283a57808060200190518101906127fa9190612ced565b612839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283090613932565b60405180910390fd5b5b505050565b6128c2846323b872dd60e01b8585856040516024016128609392919061343e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612778565b50505050565b600090565b60606128dc84846000856128e5565b90509392505050565b60608247101561292a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292190613732565b60405180910390fd5b61293385611442565b612972576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612969906138d2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161299b919061340c565b60006040518083038185875af1925050503d80600081146129d8576040519150601f19603f3d011682016040523d82523d6000602084013e6129dd565b606091505b50915091506129ed8282866129f9565b92505050949350505050565b60608315612a0957829050612a59565b600083511115612a1c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5091906135b0565b60405180910390fd5b9392505050565b828054612a6c90613d32565b90600052602060002090601f016020900481019282612a8e5760008555612ad5565b82601f10612aa757805160ff1916838001178555612ad5565b82800160010185558215612ad5579182015b82811115612ad4578251825591602001919060010190612ab9565b5b509050612ae29190612ae6565b5090565b5b80821115612aff576000816000905550600101612ae7565b5090565b6000612b16612b1184613ac9565b613aa4565b905082815260208101848484011115612b2e57600080fd5b612b39848285613cf0565b509392505050565b600081359050612b5081614787565b92915050565b600081519050612b6581614787565b92915050565b600081519050612b7a8161479e565b92915050565b600082601f830112612b9157600080fd5b8135612ba1848260208601612b03565b91505092915050565b600081359050612bb9816147b5565b92915050565b600081519050612bce816147b5565b92915050565b600060208284031215612be657600080fd5b6000612bf484828501612b41565b91505092915050565b600060208284031215612c0f57600080fd5b6000612c1d84828501612b56565b91505092915050565b60008060408385031215612c3957600080fd5b6000612c4785828601612b41565b9250506020612c5885828601612b41565b9150509250929050565b600080600060608486031215612c7757600080fd5b6000612c8586828701612b41565b9350506020612c9686828701612b41565b9250506040612ca786828701612baa565b9150509250925092565b60008060408385031215612cc457600080fd5b6000612cd285828601612b41565b9250506020612ce385828601612baa565b9150509250929050565b600060208284031215612cff57600080fd5b6000612d0d84828501612b6b565b91505092915050565b600080600060608486031215612d2b57600080fd5b600084013567ffffffffffffffff811115612d4557600080fd5b612d5186828701612b80565b935050602084013567ffffffffffffffff811115612d6e57600080fd5b612d7a86828701612b80565b9250506040612d8b86828701612b41565b9150509250925092565b60008060008060808587031215612dab57600080fd5b600085013567ffffffffffffffff811115612dc557600080fd5b612dd187828801612b80565b945050602085013567ffffffffffffffff811115612dee57600080fd5b612dfa87828801612b80565b9350506040612e0b87828801612b41565b9250506060612e1c87828801612b41565b91505092959194509250565b600060208284031215612e3a57600080fd5b6000612e4884828501612baa565b91505092915050565b600060208284031215612e6357600080fd5b6000612e7184828501612bbf565b91505092915050565b60008060408385031215612e8d57600080fd5b6000612e9b85828601612baa565b9250506020612eac85828601612baa565b9150509250929050565b612ebf81613c41565b82525050565b612ece81613c53565b82525050565b6000612edf82613afa565b612ee98185613b10565b9350612ef9818560208601613cff565b80840191505092915050565b612f0e81613c96565b82525050565b612f1d81613cba565b82525050565b612f2c81613cde565b82525050565b6000612f3d82613b05565b612f478185613b1b565b9350612f57818560208601613cff565b612f6081613e51565b840191505092915050565b6000612f78602383613b1b565b9150612f8382613e62565b604082019050919050565b6000612f9b602283613b1b565b9150612fa682613eb1565b604082019050919050565b6000612fbe602683613b1b565b9150612fc982613f00565b604082019050919050565b6000612fe1602283613b1b565b9150612fec82613f4f565b604082019050919050565b6000613004601d83613b1b565b915061300f82613f9e565b602082019050919050565b6000613027602183613b1b565b915061303282613fc7565b604082019050919050565b600061304a602d83613b1b565b915061305582614016565b604082019050919050565b600061306d602683613b1b565b915061307882614065565b604082019050919050565b6000613090602d83613b1b565b915061309b826140b4565b604082019050919050565b60006130b3601e83613b1b565b91506130be82614103565b602082019050919050565b60006130d6602d83613b1b565b91506130e18261412c565b604082019050919050565b60006130f9602683613b1b565b91506131048261417b565b604082019050919050565b600061311c602383613b1b565b9150613127826141ca565b604082019050919050565b600061313f602183613b1b565b915061314a82614219565b604082019050919050565b6000613162602e83613b1b565b915061316d82614268565b604082019050919050565b6000613185602983613b1b565b9150613190826142b7565b604082019050919050565b60006131a8604483613b1b565b91506131b382614306565b606082019050919050565b60006131cb602683613b1b565b91506131d68261437b565b604082019050919050565b60006131ee602083613b1b565b91506131f9826143ca565b602082019050919050565b6000613211601683613b1b565b915061321c826143f3565b602082019050919050565b6000613234602183613b1b565b915061323f8261441c565b604082019050919050565b6000613257602083613b1b565b91506132628261446b565b602082019050919050565b600061327a602583613b1b565b915061328582614494565b604082019050919050565b600061329d602483613b1b565b91506132a8826144e3565b604082019050919050565b60006132c0601d83613b1b565b91506132cb82614532565b602082019050919050565b60006132e3602883613b1b565b91506132ee8261455b565b604082019050919050565b6000613306602b83613b1b565b9150613311826145aa565b604082019050919050565b6000613329602a83613b1b565b9150613334826145f9565b604082019050919050565b600061334c601f83613b1b565b915061335782614648565b602082019050919050565b600061336f602e83613b1b565b915061337a82614671565b604082019050919050565b6000613392602583613b1b565b915061339d826146c0565b604082019050919050565b60006133b5603183613b1b565b91506133c08261470f565b604082019050919050565b60006133d8601f83613b1b565b91506133e38261475e565b602082019050919050565b6133f781613c7f565b82525050565b61340681613c89565b82525050565b60006134188284612ed4565b915081905092915050565b60006020820190506134386000830184612eb6565b92915050565b60006060820190506134536000830186612eb6565b6134606020830185612eb6565b61346d60408301846133ee565b949350505050565b600060408201905061348a6000830185612eb6565b61349760208301846133ee565b9392505050565b60006080820190506134b36000830187612eb6565b6134c060208301866133ee565b6134cd60408301856133ee565b6134da60608301846133ee565b95945050505050565b600060c0820190506134f86000830189612eb6565b61350560208301886133ee565b61351260408301876133ee565b61351f60608301866133ee565b61352c60808301856133ee565b61353960a08301846133ee565b979650505050505050565b60006020820190506135596000830184612ec5565b92915050565b60006020820190506135746000830184612f05565b92915050565b600060208201905061358f6000830184612f14565b92915050565b60006020820190506135aa6000830184612f23565b92915050565b600060208201905081810360008301526135ca8184612f32565b905092915050565b600060208201905081810360008301526135eb81612f6b565b9050919050565b6000602082019050818103600083015261360b81612f8e565b9050919050565b6000602082019050818103600083015261362b81612fb1565b9050919050565b6000602082019050818103600083015261364b81612fd4565b9050919050565b6000602082019050818103600083015261366b81612ff7565b9050919050565b6000602082019050818103600083015261368b8161301a565b9050919050565b600060208201905081810360008301526136ab8161303d565b9050919050565b600060208201905081810360008301526136cb81613060565b9050919050565b600060208201905081810360008301526136eb81613083565b9050919050565b6000602082019050818103600083015261370b816130a6565b9050919050565b6000602082019050818103600083015261372b816130c9565b9050919050565b6000602082019050818103600083015261374b816130ec565b9050919050565b6000602082019050818103600083015261376b8161310f565b9050919050565b6000602082019050818103600083015261378b81613132565b9050919050565b600060208201905081810360008301526137ab81613155565b9050919050565b600060208201905081810360008301526137cb81613178565b9050919050565b600060208201905081810360008301526137eb8161319b565b9050919050565b6000602082019050818103600083015261380b816131be565b9050919050565b6000602082019050818103600083015261382b816131e1565b9050919050565b6000602082019050818103600083015261384b81613204565b9050919050565b6000602082019050818103600083015261386b81613227565b9050919050565b6000602082019050818103600083015261388b8161324a565b9050919050565b600060208201905081810360008301526138ab8161326d565b9050919050565b600060208201905081810360008301526138cb81613290565b9050919050565b600060208201905081810360008301526138eb816132b3565b9050919050565b6000602082019050818103600083015261390b816132d6565b9050919050565b6000602082019050818103600083015261392b816132f9565b9050919050565b6000602082019050818103600083015261394b8161331c565b9050919050565b6000602082019050818103600083015261396b8161333f565b9050919050565b6000602082019050818103600083015261398b81613362565b9050919050565b600060208201905081810360008301526139ab81613385565b9050919050565b600060208201905081810360008301526139cb816133a8565b9050919050565b600060208201905081810360008301526139eb816133cb565b9050919050565b6000602082019050613a0760008301846133ee565b92915050565b6000606082019050613a2260008301866133ee565b613a2f60208301856133ee565b613a3c6040830184612eb6565b949350505050565b6000608082019050613a5960008301876133ee565b613a6660208301866133ee565b613a7360408301856133ee565b613a8060608301846133ee565b95945050505050565b6000602082019050613a9e60008301846133fd565b92915050565b6000613aae613abf565b9050613aba8282613d64565b919050565b6000604051905090565b600067ffffffffffffffff821115613ae457613ae3613e22565b5b613aed82613e51565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000613b3782613c7f565b9150613b4283613c7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b7757613b76613d95565b5b828201905092915050565b6000613b8d82613c7f565b9150613b9883613c7f565b925082613ba857613ba7613dc4565b5b828204905092915050565b6000613bbe82613c7f565b9150613bc983613c7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c0257613c01613d95565b5b828202905092915050565b6000613c1882613c7f565b9150613c2383613c7f565b925082821015613c3657613c35613d95565b5b828203905092915050565b6000613c4c82613c5f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613ca182613ca8565b9050919050565b6000613cb382613c5f565b9050919050565b6000613cc582613ccc565b9050919050565b6000613cd782613c5f565b9050919050565b6000613ce982613c89565b9050919050565b82818337600083830152505050565b60005b83811015613d1d578082015181840152602081019050613d02565b83811115613d2c576000848401525b50505050565b60006002820490506001821680613d4a57607f821691505b60208210811415613d5e57613d5d613df3565b5b50919050565b613d6d82613e51565b810181811067ffffffffffffffff82111715613d8c57613d8b613e22565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f426f72726f77696e6720616d6f756e74206d75737420626520706f736974697660008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b7f526571756573746564206d6f7265207468656e20617661696c61626c6520666f60008201527f72206120626f72726f77696e6700000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e636f72726563742063616c6375616c74696f6e206f66207368617265732060008201527f647572696e6720697373696e6700000000000000000000000000000000000000602082015250565b7f53686172657320616d6f756e74206d757374206265206e6f6e2d7a65726f0000600082015250565b7f4d6f726520736861726573207370656369666965642c2073656e646572206e6f60008201527f74206861766520656e6f75676800000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f466f72206465706f73697420616d6f756e74206d757374206265206e6f6e2d7a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b7f537472617465677920646f206e6f742077616e74207661756c7420617373657460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f546f74616c206c6f737320626967676572207468616e2061636365707461626c60008201527f65206d61784c6f73730000000000000000000000000000000000000000000000602082015250565b7f5368617265732077686963682077696c6c206265206275726e2077697468206c60008201527f6f7373657320697320626967676572207468616e20676976656e206d6178536860208201527f6172657300000000000000000000000000000000000000000000000000000000604082015250565b7f496e636f72726563742063616c6375616c74696f6e206f66207368617265277360008201527f2076616c75650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f6d61784c6f737320697320626967676572203130302500000000000000000000600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c656e6465723a2063616c6c6572206973206e6f742061207374726174656779600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f466f722069737375652073686172657320616d6f756e74206d7573742062652060008201527f6e6f6e2d7a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f43616e6e6f742063616c6375616c74652076616c756520666f72206e6f74206560008201527f78697374696e6720736861726573000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f466f7220657374696d6174652076616c75652073686172657320616d6f756e7460008201527f206d757374206265206e6f6e2d7a65726f000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61479081613c41565b811461479b57600080fd5b50565b6147a781613c53565b81146147b257600080fd5b50565b6147be81613c7f565b81146147c957600080fd5b5056fea26469706673582212203831b7d2f784ac721b0e3a91d0741167d081d3eec8d69a1418dc78ce93e0d81a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__EquityFund_init(string,string,address)": {
        "params": {
          "name": "- name of the token",
          "storageTokenAddress": "- address of ERC20 token contract which will be stored in fund",
          "symbol": "- token symbol"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "maxLoss": "- The maximum acceptable loss to sustain on withdrawal.  Up to that amount of shares can be burnt to cover losses on withdrawal.  Represented in uint256, where 1 equal 0.01%.",
          "maxShares": "- How many shares to try redeem for tokens, if will be not possible redeem all, then will be redeemed only available partially"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Borrowed(address,uint256,uint256,uint256)": {
        "notice": "Emit when strategy borrow some assets"
      },
      "Deposit(uint256,uint256,address)": {
        "notice": "Fired when new amount of tokens deposited and shares a issued for holder"
      },
      "ReturnFromStrategy(uint256,uint256,uint256,uint256)": {
        "notice": "Emit when assets returned from strategy"
      },
      "Withdraw(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Fired when assets for a given shares a withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "assets()": {
        "notice": "Contract of token which will be stored in this vault"
      },
      "borrow(uint256)": {
        "notice": "Strategy can requests some credit which then must return"
      },
      "creditAvailable()": {
        "notice": "Estimate how much strategy can borrow from this Lender."
      },
      "deposit(uint256)": {
        "notice": "Add deposit to fund storage and issues shares for a recepient Mint shares based on expected value under control at the moment Not collect real assets from borrowers, as it allow manipulate issue rate Will transfer `amount` of tokens from `message sender` and issue shares to him"
      },
      "initialize(string,string,address,address)": {
        "notice": "name - name of the token symbol - token symbol storageTokenAddress - address of ERC20 token contract which will be stored in fund strategyAddress - address of strategy which will stake tokens"
      },
      "totalAssets()": {
        "notice": "Returns the total quantity of all assets under control of this fund, whether they're loaned out to a strategy, or currently held in the fund."
      },
      "totalDebt()": {
        "notice": "Amount of tokens that all strategies have borrowed."
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraws the calling account's tokens from this Vault, redeeming  amount `maxShares` for an appropriate amount of tokens.  As holder address will be used message sender"
      }
    },
    "notice": "Simple investment vault, which allow store tokens in vault Tokens can be borrowed by strategy and returned with percents And vault allow widthdraw tokens in proportion of shares which user have",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3488,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "assets",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20Upgradeable)1013"
      },
      {
        "astId": 1610,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 343,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 349,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 351,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 353,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 934,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1076,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 279,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3268,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "totalDebt",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 3271,
        "contract": "contracts/InvestmentVault.sol:InvestmentVault",
        "label": "strategy",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IBorrower)3076"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBorrower)3076": {
        "encoding": "inplace",
        "label": "contract IBorrower",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1013": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}